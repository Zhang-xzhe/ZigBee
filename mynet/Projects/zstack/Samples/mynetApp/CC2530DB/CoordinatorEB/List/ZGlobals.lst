###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2021  11:31:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\stack\sys\ZGlobals.c                            #
#    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\stack\sys\ZGlobals.c -D ZTOOL_P1 -D MT_TASK -D  #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proj #
#                          ects\zstack\Samples\mynetApp\CC2530DB\CoordinatorE #
#                          B\List\ -lA C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\Coor #
#                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\ -I           #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\SOURCE\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\ZGlobals.lst                                    #
#    Object file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ZGlobals.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2010-01-17 08:58:03 -0800 (Sun, 17 Jan 2010) $
      4            Revision:       $Revision: 21533 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          
     50          #if defined(ZCL_KEY_ESTABLISH)
     51          #include "zcl_key_establish.h"
     52          #endif
     53          
     54          #include "OnBoard.h"

    for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",228  Error[Pe169]: 
          expected a declaration

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe077]: 
          this declaration has no storage class or type specifier

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr CLKCONCMD" (declared at line 200 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",230  Error[Pe169]: 
          expected a declaration

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe077]: 
          this declaration has no storage class or type specifier

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr SLEEPCMD" (declared at line 190 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe065]: 
          expected a ";"

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe007]: 
          unrecognized token

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                       ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe007]: 
          unrecognized token

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe169]: 
          expected a declaration

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe077]: 
          this declaration has no storage class or type specifier

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P1DIR"
          (declared at line 268 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    LED3_DDR |= LED3_BV;                                           \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe077]: 
          this declaration has no storage class or type specifier

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P0INP"
          (declared at line 131 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe007]: 
          unrecognized token

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe169]: 
          expected a declaration

  typedef void (*halUARTCBack_t) (uint8 port, uint8 event);
                                                          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\INCLUDE\hal_uart.h",119  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    halUARTCBack_t      callBackFunc;
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\INCLUDE\hal_uart.h",141  Error[Pe020]: 
          identifier "halUARTCBack_t" is undefined
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          
     60          /*********************************************************************
     61           * CONSTANTS
     62           */
     63          
     64          /*********************************************************************
     65           * TYPEDEFS
     66           */
     67          
     68          typedef struct zgItem
     69          {
     70            uint16 id;
     71            uint16 len;
     72            void *buf;
     73          } zgItem_t;
     74          
     75          /*********************************************************************
     76           * NWK GLOBAL VARIABLES
     77           */
     78          
     79          // Polling values
     80          uint16 zgPollRate = POLL_RATE;
     81          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
     82          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
     83          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
     84          
     85          // Transmission retries numbers
     86          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
     87          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
     88          
     89          // Default channel list
     90          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
     91          
     92          // Default starting scan duration
     93          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
     94          
     95          // Stack profile Id
     96          uint8 zgStackProfile = STACK_PROFILE_ID;
     97          
     98          // Default indirect message holding timeout
     99          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
    100          
    101          // Security mode
    102          uint8 zgSecurityMode = ZG_SECURITY_MODE;
    103          
    104          // Secure permit join
    105          uint8 zgSecurePermitJoin = true;
    106          
    107          // Trust center address
    108          uint16 zgTrustCenterAddr = ZG_TRUSTCENTER_ADDR;
    109          
    110          #if defined(ZCL_KEY_ESTABLISH)
    111          
    112          // 32 bits counter for random number generator
    113          uint32 zgRNGCounter = 1;
    114          
    115          // Certificate Authority Public Key
    116          uint8 zgCAPublicKey[ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH];
    117          
    118          // Local Certificate for AMI CBKE
    119          uint8 zgLocalCertificate[ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH];
    120          
    121          // Static Private Key
    122          uint8 zgStaticPrivateKey[ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH];
    123          
    124          // For test only
    125          uint8 zgRemotePublicKey[ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH];
    126          #endif
    127          
    128          // Route expiry
    129          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
    130          
    131          // Extended PAN Id
    132          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
    133          
    134          // Broadcast parameters
    135          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
    136          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
    137          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
    138          
    139          // Network mode
    140          uint8 zgNwkMode = NWK_MODE;
    141          
    142          // Many-to-one values
    143          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
    144          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
    145          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
    146          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
    147          
    148          /*********************************************************************
    149           * APS GLOBAL VARIABLES
    150           */
    151          
    152          // The maximum number of retries allowed after a transmission failure
    153          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
    154          
    155          // The maximum number of seconds (milliseconds) to wait for an
    156          // acknowledgement to a transmitted frame.
    157          
    158          // This number is used by polled devices.
    159          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
    160          
    161          // This number is used by non-polled devices in the following formula:
    162          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)
    163          uint8 zgApsAckWaitMultiplier = 2;
    164          
    165          // The maximum number of milliseconds for the end device binding
    166          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
    167          
    168          // The 64-big identifier of the network to join or form.
    169          // Default set to all zeros
    170          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
    171          
    172          // A boolean flag that indicates whether it is OK to use insecure join
    173          // on startup. Default set to true
    174          uint8 zgApsUseInsecureJoin = TRUE;
    175          
    176          // The size of a tx window when using fragmentation
    177          uint8 zgApscMaxWindowSize = APS_DEFAULT_WINDOW_SIZE;
    178          
    179          // The delay between tx packets when using fragmentaition
    180          uint16 zgApsInterframeDelay = APS_DEFAULT_INTERFRAME_DELAY;
    181          
    182          // The radius of broadcast multicast transmissions
    183          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
    184          /*********************************************************************
    185           * SECURITY GLOBAL VARIABLES
    186           */
    187          
    188          // This is the pre-configured key in use (from NV memory)
    189          uint8 zgPreConfigKey[SEC_KEY_LEN];
    190          
    191          // If true, preConfigKey should be configured on all devices on the network
    192          // If false, it is configured only on the coordinator and sent to other
    193          // devices upon joining.
    194          uint8 zgPreConfigKeys = FALSE;// TRUE;
    195          
    196          // If true, defaultTCLinkKey should be configured on all devices on the 
    197          // network. If false, individual trust center link key between each device and 
    198          // the trust center should be manually configured via MT_WRITE_NV
    199          uint8 zgUseDefaultTCLK = TRUE; // FALSE
    200          
    201          
    202          /*********************************************************************
    203           * ZDO GLOBAL VARIABLES
    204           */
    205          
    206          // Configured PAN ID
    207          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
    208          
    209          // Device Logical Type
    210          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
    211          
    212          // Startup Delay
    213          uint8 zgStartDelay = START_DELAY;
    214          
    215          #if !defined MT_TASK
    216          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().
    217          uint8 zgZdoDirectCB = FALSE;
    218          #endif
    219          
    220          /*********************************************************************
    221           * APPLICATION GLOBAL VARIABLES
    222           */
    223          
    224          // Network Manager Mode
    225          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
    226          
    227          /*********************************************************************
    228           * NON-STANDARD GLOBAL VARIABLES
    229           */
    230          
    231          // Simple API Endpoint
    232          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
    233          
    234          /*********************************************************************
    235           * LOCAl VARIABLES
    236           */
    237          
    238          /*********************************************************************
    239           * ZGlobal Item Table
    240           */
    241          static CONST zgItem_t zgItemTable[] =
    242          {
    243          #if defined ( NV_INIT )
    244          #if !defined MT_TASK
    245            {
    246              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    247            },
    248          #endif
    249            {
    250              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    251            },
    252            {
    253              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    254            },
    255            {
    256             ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    257            },
    258            {
    259              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    260            },
    261            {
    262              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    263            },
    264            {
    265             ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    266            },
    267            {
    268               ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    269            },
    270            {
    271              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    272            },
    273            {
    274              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    275            },
    276            {
    277              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    278            },
    279            {
    280              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    281            },
    282            {
    283              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    284            },
    285            {
    286              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    287            },
    288            {
    289              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    290            },
    291            {
    292              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    293            },
    294            {
    295              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    296            },
    297            {
    298              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    299            },
    300            {
    301              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    302            },
    303            {
    304              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    305            },
    306            {
    307              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    308            },
    309            {
    310              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    311            },
    312          #ifndef NONWK
    313            {
    314              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    315            },
    316            {
    317              ZCD_NV_PRECFGKEY, SEC_KEY_LEN, &zgPreConfigKey
    318            },
    319            {
    320              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    321            },
    322            {
    323              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    324            },
    325            {
    326              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    327            },
    328            {
    329              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    330            },
    331            {
    332              ZCD_NV_TRUSTCENTER_ADDR, sizeof(zgTrustCenterAddr), &zgTrustCenterAddr
    333            },
    334          #if defined(ZCL_KEY_ESTABLISH)
    335            {
    336              ZCD_NV_RNG_COUNTER, sizeof(zgRNGCounter), &zgRNGCounter
    337            },
    338            {
    339              ZCD_NV_CA_PUBLIC_KEY, ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH, zgCAPublicKey
    340            },
    341            {
    342              ZCD_NV_lOCAL_CERTIFICATE, ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH, zgLocalCertificate
    343            },
    344            {
    345              ZCD_NV_STATIC_PRIVATE_KEY, ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH, zgStaticPrivateKey
    346            },
    347            {
    348              ZCD_NV_STATIC_PUBLIC_KEY, ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH, zgRemotePublicKey
    349            },
    350          #endif // CBKE
    351          #endif // NONWK
    352            {
    353              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    354            },
    355            {
    356              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    357            },
    358            {
    359              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    360            },
    361            {
    362              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    363            },
    364            {
    365              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    366            },
    367            {
    368              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    369            },
    370            {
    371              ZCD_NV_APSF_WINDOW_SIZE, sizeof(zgApscMaxWindowSize), &zgApscMaxWindowSize
    372            },
    373            {
    374              ZCD_NV_APSF_INTERFRAME_DELAY, sizeof(zgApsInterframeDelay), &zgApsInterframeDelay
    375            },
    376            {
    377              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    378            },
    379            {
    380              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    381            },
    382            {
    383              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    384            },
    385            {
    386              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    387            },
    388          #endif // NV_INIT
    389            // Last item -- DO NOT MOVE IT!
    390            {
    391              0x00, 0, NULL
    392            }
    393          };
    394          
    395          /*********************************************************************
    396           * LOCAL FUNCTIONS
    397           */
    398          
    399          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    400          
    401          
    402          /*********************************************************************
    403           * @fn       zgItemInit()
    404           *
    405           * @brief
    406           *
    407           *   Initialize a global item. If the item doesn't exist in NV memory,
    408           *   write the system default (value passed in) into NV memory. But if
    409           *   it exists, set the item to the value stored in NV memory.
    410           *
    411           *   Also, if setDefault is TRUE and the item exists, we will write
    412           *   the default value to NV space.
    413           *
    414           * @param   id - item id
    415           * @param   len - item len
    416           * @param   buf - pointer to the item
    417           * @param   setDefault - TRUE to set default, not read
    418           *
    419           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    420           *          exist in NV, NV_OPER_FAILED if failure.
    421           */
    422          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    423          {
    424          
    425            uint8 status;
    426          
    427            // If the item doesn't exist in NV memory, create and initialize
    428            // it with the value passed in.
    429            status = osal_nv_item_init( id, len, buf );
    430            if ( status == ZSUCCESS )
    431            {
    432              if ( setDefault )
    433              {
    434                // Write the default value back to NV
    435                status =  osal_nv_write( id, 0, len, buf );
    436              }
    437              else
    438              {
    439                // The item exists in NV memory, read it from NV memory
    440                status = osal_nv_read( id, 0, len, buf );
    441              }
    442            }
    443          
    444            return (status);
    445          }
    446          
    447          /*********************************************************************
    448           * API FUNCTIONS
    449           */
    450          
    451          
    452          /*********************************************************************
    453           * @fn          zgInit
    454           *
    455           * @brief
    456           *
    457           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    458           *   NV memory, write the system default into NV memory. But if
    459           *   it exists, set the item to the value stored in NV memory.
    460           *
    461           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    462           *       that the Config state items (zgItemTable) need to be
    463           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    464           *
    465           *
    466           * @param       none
    467           *
    468           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    469           *              exist in NV, NV_OPER_FAILED if failure.
    470           */
    471          uint8 zgInit( void )
    472          {
    473            uint8  setDefault = FALSE;
    474          
    475            // Do we want to default the Config state values
    476            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
    477            {
    478              setDefault = TRUE;
    479            }
    480          
    481          #if 0
    482            // Enable this section if you need to track the number of resets
    483            // This section is normally disabled to minimize "wear" on NV memory
    484            uint16 bootCnt = 0;
    485          
    486            // Update the Boot Counter
    487            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    488            {
    489              // Get the old value from NV memory
    490              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    491            }
    492          
    493            // Increment the Boot Counter and store it into NV memory
    494            if ( setDefault )
    495              bootCnt = 0;
    496            else
    497              bootCnt++;
    498            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    499          #endif
    500          
    501            // Initialize the Extended PAN ID as my own extended address
    502            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
    503          
    504          #ifndef NONWK
    505            // Initialize the Pre-Configured Key to the default key
    506            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );  // Do NOT Change!!!
    507          #endif // NONWK
    508          
    509            // Initialize the items table
    510            zgInitItems( setDefault );
    511          
    512            // Clear the Config State default
    513            if ( setDefault )
    514            {
    515              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
    516            }
    517          
    518            return ( ZSUCCESS );
    519          }
    520          
    521          /*********************************************************************
    522           * @fn          zgInitItems
    523           *
    524           * @brief       Initializes RAM variables from NV.  If NV items don't
    525           *              exist, then the NV is initialize with what is in RAM
    526           *              variables.
    527           *
    528           * @param       none
    529           *
    530           * @return      none
    531           */
    532          void zgInitItems( uint8 setDefault )
    533          {
    534            uint8  i = 0;
    535          
    536            while ( zgItemTable[i].id != 0x00 )
    537            {
    538              // Initialize the item
    539              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    540          
    541              // Move on to the next item
    542              i++;
    543            }
    544          }
    545          
    546          /*********************************************************************
    547           * @fn          zgReadStartupOptions
    548           *
    549           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    550           *
    551           * @param       none
    552           *
    553           * @return      the ZCD_NV_STARTUP_OPTION NV item
    554           */
    555          uint8 zgReadStartupOptions( void )
    556          {
    557            // Default to Use Config State and Use Network State
    558            uint8 startupOption = 0;
    559          
    560            // This should have been done in ZMain.c, but just in case.
    561            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    562                                        sizeof(startupOption),
    563                                        &startupOption ) == ZSUCCESS )
    564            {
    565              // Read saved startup control
    566              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    567                            0,
    568                            sizeof( startupOption ),
    569                            &startupOption);
    570            }
    571            return ( startupOption );
    572          }
    573          
    574          /*********************************************************************
    575           * @fn          zgWriteStartupOptions
    576           *
    577           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    578           *
    579           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    580           *               clear bit. The set bit is an OR operation, and the
    581           *               clear bit is an AND ~(bitOptions) operation.
    582           *
    583           * @param       bitOptions - which bits to perform action on:
    584           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    585           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    586           *
    587           * @return      ZSUCCESS if successful
    588           */
    589          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
    590          {
    591            uint8 status;
    592            uint8 startupOptions = 0;
    593          
    594            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    595                          0,
    596                          sizeof( startupOptions ),
    597                          &startupOptions );
    598          
    599            if ( status == ZSUCCESS )
    600            {
    601              if ( action == ZG_STARTUP_SET )
    602              {
    603                // Set bits
    604                startupOptions |= bitOptions;
    605              }
    606              else
    607              {
    608                // Clear bits
    609                startupOptions &= (bitOptions ^ 0xFF);
    610              }
    611          
    612              // Changed?
    613              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    614                           0,
    615                           sizeof( startupOptions ),
    616                           &startupOptions );
    617            }
    618          
    619            return ( status );
    620          }
    621          
    622          /*********************************************************************
    623           * @fn          zgSetItem
    624           *
    625           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    626           *
    627           * @param       id - NV ID
    628           *              len - NV item length
    629           *              buf - pointer to the input buffer
    630           *
    631           * @return      none
    632           */
    633          void zgSetItem( uint16 id, uint16 len, void *buf )
    634          {
    635          
    636            uint8  i = 0;
    637          
    638            // Look up the NV item table
    639            while ( zgItemTable[i].id != 0x00 )
    640            {
    641              if( zgItemTable[i].id == id )
    642              {
    643                if ( zgItemTable[i].len == len )
    644                {
    645                  osal_memcpy( zgItemTable[i].buf, buf, len );
    646                }
    647                break;
    648              }
    649              // Move on to the next item
    650              i++;
    651            }
    652          
    653          }
    654          
    655          
    656          /*********************************************************************
    657          *********************************************************************/

Errors: 25
Warnings: 2

###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2021  11:30:59 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\mac\low_level\srf04\mac_rx.c                    #
#    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\mac\low_level\srf04\mac_rx.c -D ZTOOL_P1 -D     #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\CoordinatorEB\List\ -lA                    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\ --diag_suppress Pe001,Pa010 -o                 #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\ -I           #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\SOURCE\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\mac_rx.lst                                      #
#    Object file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\mac_rx.r51                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2007-10-08 14:05:36 -0700 (Mon, 08 Oct 2007) $
      4            Revision:       $Revision: 15624 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* high-level */
     50          #include "mac_high_level.h"
     51          #include "mac_spec.h"
     52          
     53          /* exported low-level */
     54          #include "mac_low_level.h"
     55          
     56          /* low-level specific */
     57          #include "mac_rx.h"
     58          #include "mac_tx.h"
     59          #include "mac_rx_onoff.h"
     60          #include "mac_radio.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

    for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",228  Error[Pe169]: 
          expected a declaration

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe077]: 
          this declaration has no storage class or type specifier

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr CLKCONCMD" (declared at line 200 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",230  Error[Pe169]: 
          expected a declaration

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe077]: 
          this declaration has no storage class or type specifier

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr SLEEPCMD" (declared at line 190 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe065]: 
          expected a ";"

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe007]: 
          unrecognized token

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                       ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe007]: 
          unrecognized token

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe169]: 
          expected a declaration

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe077]: 
          this declaration has no storage class or type specifier

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P1DIR"
          (declared at line 268 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    LED3_DDR |= LED3_BV;                                           \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe077]: 
          this declaration has no storage class or type specifier

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P0INP"
          (declared at line 131 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe007]: 
          unrecognized token

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe169]: 
          expected a declaration

  extern uint8 macChipVersion;
                             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\mac_mcu.h",193  Warning[Pe012]: 
          parsing restarts here after previous syntax error
     64          #include "mac_autopend.h"
     65          
     66          /* debug */
     67          #include "mac_assert.h"
     68          
     69          
     70          /* ------------------------------------------------------------------------------------------------
     71           *                                            Defines
     72           * ------------------------------------------------------------------------------------------------
     73           */
     74          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     75          
     76          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     77          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     78                                             MAC_FCF_FIELD_LEN      +  \
     79                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     80                                             MAC_FCS_FIELD_LEN)
     81          
     82          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
     83          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
     84          
     85          /* addressing mode reserved value */
     86          #define ADDR_MODE_RESERVERED  1
     87          
     88          /* length of command frame identifier */
     89          #define CMD_FRAME_ID_LEN      1
     90          
     91          /* packet size mask is equal to the maximum value */
     92          #define PHY_PACKET_SIZE_MASK  0x7F
     93          
     94          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
     95          #define PROMISCUOUS_MODE_OFF  0x00
     96          
     97          /* bit of proprietary FCS format that indicates if the CRC is OK */
     98          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
     99          
    100          /* dummy length value for unused entry in lookup table */
    101          #define DUMMY_LEN   0xBE
    102          
    103          /* value for rxThresholdIntState */
    104          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    105          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    106          #define RX_THRESHOLD_INT_STATE_RESET      2
    107          
    108          
    109          /* ------------------------------------------------------------------------------------------------
    110           *                                             Macros
    111           * ------------------------------------------------------------------------------------------------
    112           */
    113          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    114          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    115          
    116          /*
    117           *  Macro for encoding frame control information into internal flags format.
    118           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    119           *  format *or* the specification changes, this macro will need to be modified.
    120           */
    121          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    122          
    123          /*
    124           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    125           *  the same length as the original and includes:
    126           *    1) the RSSI value
    127           *    2) the average correlation value (used for LQI)
    128           *    3) a CRC passed bit
    129           *
    130           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    131           */
    132          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    133          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    134          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    135          
    136          
    137          /* ------------------------------------------------------------------------------------------------
    138           *                                       Global Variables
    139           * ------------------------------------------------------------------------------------------------
    140           */
    141          uint8 macRxActive;
    142          uint8 macRxFilter;
    143          uint8 macRxOutgoingAckFlag;
    144          
    145          
    146          /* ------------------------------------------------------------------------------------------------
    147           *                                       Local Constants
    148           * ------------------------------------------------------------------------------------------------
    149           */
    150          static const uint8 CODE macRxAddrLen[] =
    151          {
    152            0,                                                /* no address */
    153            DUMMY_LEN,                                        /* reserved */
    154            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    155            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    156          };
    157          
    158          
    159          /* ------------------------------------------------------------------------------------------------
    160           *                                       Local Prototypes
    161           * ------------------------------------------------------------------------------------------------
    162           */
    163          static void rxHaltCleanupFinalStep(void);
    164          
    165          static void rxStartIsr(void);
    166          static void rxAddrIsr(void);
    167          static void rxPayloadIsr(void);
    168          static void rxDiscardIsr(void);
    169          static void rxFcsIsr(void);
    170          
    171          static void rxPrepPayload(void);
    172          static void rxDiscardFrame(void);
    173          static void rxDone(void);
    174          static void rxPostRxUpdates(void);
    175          
    176          
    177          /* ------------------------------------------------------------------------------------------------
    178           *                                         Local Variables
    179           * ------------------------------------------------------------------------------------------------
    180           */
    181          static void    (* pFuncRxState)(void);
    182          static macRx_t  * pRxBuf;
    183          
    184          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
    185          static uint8  rxUnreadLen;
    186          static uint8  rxNextLen;
    187          static uint8  rxPayloadLen;
    188          static uint8  rxFilter;
    189          static uint8  rxPromiscuousMode;
    190          static uint8  rxIsrActiveFlag;
    191          static uint8  rxResetFlag;
    192          static uint8  rxFifoOverflowCount;
    193          
    194          
    195          /**************************************************************************************************
    196           * @fn          macRxInit
    197           *
    198           * @brief       Initialize receive variable states.
    199           *
    200           * @param       none
    201           *
    202           * @return      none
    203           **************************************************************************************************
    204           */
    205          MAC_INTERNAL_API void macRxInit(void)
    206          {
    207            macRxFilter          = RX_FILTER_OFF;
    208            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
    209            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
    210            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
    211            pFuncRxState         = &rxStartIsr;
    212            macRxOutgoingAckFlag = 0;
    213            rxIsrActiveFlag      = 0;
    214            rxResetFlag          = 0;
    215            rxFifoOverflowCount  = 0;
    216          }
    217          
    218          
    219          /**************************************************************************************************
    220           * @fn          macRxRadioPowerUpInit
    221           *
    222           * @brief       Initialization for after radio first powers up.
    223           *
    224           * @param       none
    225           *
    226           * @return      none
    227           **************************************************************************************************
    228           */
    229          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
    230          {
    231            /* set threshold at initial value */
    232            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
    233          
    234            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    235            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
    236          
    237            /* enable threshold interrupts */
    238            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
    239          }
    240          
    241          
    242          /**************************************************************************************************
    243           * @fn          macRxTxReset
    244           *
    245           * @brief       Reset the receive state.
    246           *
    247           * @param       none
    248           *
    249           * @return      none
    250           **************************************************************************************************
    251           */
    252          MAC_INTERNAL_API void macRxTxReset(void)
    253          {
    254            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    255            macRxHardDisable();
    256          
    257            /*
    258             *   Note : transmit does not require any reset logic
    259             *          beyond what macRxHardDisable() provides.
    260             */
    261          
    262            /* restore deault filter mode to off */
    263            macRxFilter = RX_FILTER_OFF;
    264          
    265            /* return promiscuous mode to default off state */
    266            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
    267          }
    268          
    269          
    270          /**************************************************************************************************
    271           * @fn          macRxHaltCleanup
    272           *
    273           * @brief       Cleanup up the receive logic after receiver is forced off.
    274           *
    275           * @param       none
    276           *
    277           * @return      none
    278           **************************************************************************************************
    279           */
    280          MAC_INTERNAL_API void macRxHaltCleanup(void)
    281          {
    282            rxResetFlag = 1;
    283            if (!rxIsrActiveFlag)
    284            {
    285              rxHaltCleanupFinalStep();
    286              rxResetFlag = 0;
    287            }
    288          }
    289          
    290          
    291          /*=================================================================================================
    292           * @fn          rxHaltCleanupFinalStep
    293           *
    294           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    295           *
    296           * @param       none
    297           *
    298           * @return      none
    299           *=================================================================================================
    300           */
    301          static void rxHaltCleanupFinalStep(void)
    302          {
    303            /* cancel any upcoming ACK transmit complete callback */
    304            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
    305          
    306            /* set start of frame threshold */
    307            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
    308          
    309            /* flush the receive FIFO */
    310            MAC_RADIO_FLUSH_RX_FIFO();
    311          
    312            /* clear any receive interrupt that happened to squeak through */
    313            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
    314          
    315            /* if data buffer has been allocated, free it */
    316            if (pRxBuf != NULL)
    317            {
    318              MEM_FREE((uint8 **)&pRxBuf);
    319            }
    320            pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
    321          
    322            pFuncRxState = &rxStartIsr;
    323          
    324            /* if receive was active, perform the post receive updates */
    325            if (macRxActive || macRxOutgoingAckFlag)
    326            {
    327              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
    328              macRxOutgoingAckFlag = 0;
    329          
    330              rxPostRxUpdates();
    331            }
    332          }
    333          
    334          
    335          /**************************************************************************************************
    336           * @fn          macRxThresholdIsr
    337           *
    338           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    339           *              It implements a state machine for receiving a packet.
    340           *
    341           * @param       none
    342           *
    343           * @return      none
    344           **************************************************************************************************
    345           */
    346          MAC_INTERNAL_API void macRxThresholdIsr(void)
    347          {
    348            /* if currently reseting, do not execute receive ISR logic */
    349            if (rxResetFlag)
    350            {
    351              return;
    352            }
    353          
    354            /*
    355             *  Call the function that handles the current receive state.
    356             *  A flag is set for the duration of the call to indicate
    357             *  the ISR is executing.  This is necessary for the reset
    358             *  logic so it does not perform a reset in the middle of
    359             *  executing the ISR.
    360             */
    361            rxIsrActiveFlag = 1;
    362            (*pFuncRxState)();
    363            rxIsrActiveFlag = 0;
    364          
    365            /* if a reset occurred during the ISR, peform cleanup here */
    366            if (rxResetFlag)
    367            {
    368              rxHaltCleanupFinalStep();
    369              rxResetFlag = 0;
    370            }
    371          }
    372          
    373          
    374          /*=================================================================================================
    375           * @fn          rxStartIsr
    376           *
    377           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    378           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    379           *              allocating a buffer.
    380           *
    381           * @param       none
    382           *
    383           * @return      none
    384           *=================================================================================================
    385           */
    386          static void rxStartIsr(void)
    387          {
    388            uint8  addrLen;
    389            uint8  ackWithPending;
    390            uint8  dstAddrMode;
    391            uint8  srcAddrMode;
    392          
    393            MAC_ASSERT(!macRxActive); /* receive on top of receive */
    394          
    395            /* indicate rx is active */
    396            macRxActive = MAC_RX_ACTIVE_STARTED;
    397          
    398            /*
    399             *  For bullet proof functionality, need to see if the receiver was just turned off.
    400             *  The logic to request turning off the receiver, disables interrupts and then checks
    401             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    402             *
    403             *  There is a small hole though.  It's possible to attempt turning off the receiver
    404             *  in the window from when the receive interrupt fires and the point where macRxActive
    405             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    406             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    407             *  in the RX fifo and the receive is simply aborted.
    408             *
    409             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    410             *  the receiver will just be off at this point after a hard disable.  The check described
    411             *  above will account for this case too.  However, if a hard disable were immediately
    412             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    413             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    414             */
    415            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
    416            {
    417              /* reset active flag */
    418              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
    419          
    420              /*
    421               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    422               *  the tiny, tiny window when macRxActive was not zero.
    423               */
    424              rxPostRxUpdates();
    425          
    426              /* return immediately from here */
    427              return;
    428            }
    429          
    430            /*
    431             *  If interrupts are held off for too long it's possible the previous "transmit done"
    432             *  callback is pending.  If this is the case, it needs to be completed before
    433             *  continuing with the receive logic.
    434             */
    435            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
    436          
    437            /*
    438             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    439             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    440             *  That callback execute receive cleanup logic that will run at the completion
    441             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    442             */
    443            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
    444            macRxOutgoingAckFlag = 0;
    445          
    446            /*
    447             *  Make a module-local copy of macRxFilter.  This prevents the selected
    448             *  filter from changing in the middle of a receive.
    449             */
    450            rxFilter = macRxFilter;
    451          
    452            /*-------------------------------------------------------------------------------
    453             *  Read initial frame information from FIFO.
    454             *
    455             *   This code is not triggered until the following are in the RX FIFO:
    456             *     frame length          - one byte containing length of MAC frame (excludes this field)
    457             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    458             *     sequence number       - one byte unique sequence identifier
    459             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    460             *                             if so, the frame can be verified and responded to immediately,
    461             *                             if not an ACK, these bytes will be processed normally
    462             */
    463          
    464            /* read frame length, frame control field, and sequence number from FIFO */
    465            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
    466          
    467            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    468            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
    469          
    470            /*
    471             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    472             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    473             *  the entire receive buffer is flushed.
    474             *
    475             *  In the case that this workaround is not needed, an assert is used to make sure the
    476             *  receive length field is not corrupted.  This is important because a corrupted receive
    477             *  length field is utterly fatal and, if not caught here, extremely hard to track down.
    478             */
    479            if (macChipVersion == REV_A)
                       ^
Error[Pe020]: identifier "macChipVersion" is undefined
    480            {
    481              if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    482                  (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
    483              {
    484                MAC_RADIO_FLUSH_RX_FIFO();
    485                rxDone();
    486                return;
    487              }
    488            }
    489            else
    490            {
    491              /* radio supplied a corrupted receive buffer length */
    492              MAC_ASSERT(rxUnreadLen <= (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN));
    493            }
    494          
    495          
    496          
    497            /*-------------------------------------------------------------------------------
    498             *  Process ACKs.
    499             *
    500             *  If this frame is an ACK, process it immediately and exit from here.
    501             *  If this frame is not an ACK and transmit is listening for an ACK, let
    502             *  the transmit logic know an non-ACK was received so transmit can complete.
    503             *
    504             *  In promiscuous mode ACKs are treated like any other frame.
    505             */
    506            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
    507            {
    508              halIntState_t  s;
    509              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    510              /*
    511               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    512               *  these two bytes will be the FCS.
    513               */
    514          
    515              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    516              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
    517          
    518              /*
    519               *  This critical section ensures that the ACK timeout won't be triggered in the
    520               *  millde of receiving the ACK frame.
    521               */
    522              HAL_ENTER_CRITICAL_SECTION(s);
    523          
    524              /* see if transmit is listening for an ACK */
    525              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
    526              {
    527                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
    528          
    529                /* record link quality metrics for the receive ACK */
    530                {
    531                  int8 rssiDbm;
    532                  uint8 corr;
    533          
    534                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
    535                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    536                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
    537          
    538                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
    539                  pMacDataTx->internal.correlation = corr;
    540                  pMacDataTx->internal.rssi= rssiDbm;
    541                }
    542          
    543                /*
    544                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    545                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    546                 */
    547                HAL_EXIT_CRITICAL_SECTION(s);
    548          
    549                /*
    550                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    551                 *  the transmit logic still needs to know.  In that case, treat the frame
    552                 *  as a non-ACK to complete the active transmit.
    553                 */
    554                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
    555                {
    556                  /* call transmit logic to indicate ACK was received */
    557                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
    558                }
    559                else
    560                {
    561                  macTxAckNotReceivedCallback();
    562                }
    563              }
    564              else
    565              {
    566                HAL_EXIT_CRITICAL_SECTION(s);
    567              }
    568          
    569              /* receive is done, exit from here */
    570              rxDone();
    571              return;
    572            }
    573            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
    574            {
    575              macTxAckNotReceivedCallback();
    576            }
    577          
    578            /*-------------------------------------------------------------------------------
    579             *  Apply filtering.
    580             *
    581             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    582             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    583             *  do not apply filtering.
    584             */
    585            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
    586            {
    587              if (/* filter all frames */
    588                   (rxFilter == RX_FILTER_ALL) ||
    589          
    590                   /* filter non-beacon frames */
    591                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    592                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    593          
    594                   /* filter non-command frames */
    595                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    596                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
    597              {
    598                /* discard rest of frame */
    599                rxDiscardFrame();
    600                return;
    601              }
    602            }
    603          
    604            /*-------------------------------------------------------------------------------
    605             *  Compute length of addressing fields.  Compute payload length.
    606             */
    607          
    608            /* decode addressing modes */
    609            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
    610            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
    611          
    612            /*
    613            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    614             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    615             *  the entire receive buffer is flushed.
    616             */
    617            if (macChipVersion == REV_A)
                       ^
Error[Pe020]: identifier "macChipVersion" is undefined
    618            {
    619              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
    620              {
    621                MAC_RADIO_FLUSH_RX_FIFO();
    622                rxDone();
    623                return;
    624              }
    625            }
    626          
    627            /*
    628             *  Compute the addressing field length.  A lookup table based on addressing
    629             *  mode is used for efficiency.  If the source address is present and the
    630             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    631             *  length is adjusted to match the smaller length.
    632             */
    633            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
    634            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
    635            {
    636              addrLen -= MAC_PAN_ID_FIELD_LEN;
    637            }
    638          
    639            /*
    640             *  If there are not enough unread bytes to include the computed address
    641             *  plus FCS field, the frame is corrupted and must be discarded.
    642             */
    643            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
    644            {
    645              /* discard frame and exit */
    646              rxDiscardFrame();
    647              return;
    648            }
    649          
    650            /* payload length is equal to unread bytes minus address length, minus the FCS */
    651            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
    652          
    653            /*-------------------------------------------------------------------------------
    654             *  Allocate memory for the incoming frame.
    655             */
    656            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + rxPayloadLen);
    657            if (pRxBuf == NULL)
    658            {
    659              /* Cancel the outgoing TX ACK */
    660              MAC_RADIO_CANCEL_TX_ACK();
    661          
    662              /* buffer allocation failed, discard the frame and exit*/
    663              rxDiscardFrame();
    664              return;
    665            }
    666          
    667            /*-------------------------------------------------------------------------------
    668             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    669             */
    670            ackWithPending = 0;
    671            if (!rxPromiscuousMode)
    672            {
    673              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
    674            }
    675          
    676            /*-------------------------------------------------------------------------------
    677             *  Process any ACK request.
    678             */
    679            if (macRxOutgoingAckFlag)
    680            {
    681              halIntState_t  s;
    682          
    683              /*
    684               *  This critical section ensures that the callback ISR is initiated within time
    685               *  to guarantee correlation with the strobe.
    686               */
    687              HAL_ENTER_CRITICAL_SECTION(s);
    688          
    689              /* Do not ack data packet with pending more data */
    690              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
    691              {
    692                if( macRxCheckMACPendingCallback())
    693                {
    694                  /* Check is any mac data pending for end devices */
    695                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    696                }
    697                else
    698                {
    699                  if( macSrcMatchIsEnabled )
    700                  {
    701                    /* When autopend is enabled, check if allpending is set to true */
    702                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
    703                    {
    704                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    705                    }
    706                  }
    707                  else
    708                  {
    709                    /* When autopend is disabled, check the application pending callback */
    710                    if( macRxCheckPendingCallback() )
    711                    {
    712                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    713                    }
    714                  }
    715                }
    716              }
    717          
    718              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
    719              {
    720                MAC_RADIO_TX_ACK_PEND();
    721              }
    722              else
    723              {
    724                MAC_RADIO_TX_ACK();
    725              }
    726          
    727          
    728              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    729              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
    730              HAL_EXIT_CRITICAL_SECTION(s);
    731            }
    732          
    733           /*-------------------------------------------------------------------------------
    734            *  Populate the receive buffer going up to high-level.
    735            */
    736          
    737            /* configure the payload buffer */
    738            pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
    739            pRxBuf->msdu.len = rxPayloadLen;
    740          
    741            /* set internal values */
    742            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
    743            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
    744            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
    745            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
    746            pRxBuf->internal.frameType    = MAC_FRAME_TYPE(&rxBuf[1]);
    747            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
    748            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
    749            pRxBuf->sec.securityLevel     = MAC_SEC_LEVEL_NONE;
    750          
    751            /*-------------------------------------------------------------------------------
    752             *  If the processing the addressing fields does not require more bytes from
    753             *  the FIFO go directly address processing function.  Otherwise, configure
    754             *  interrupt to jump there once bytes are received.
    755             */
    756            if (addrLen == 0)
    757            {
    758              /* no addressing fields to read, prepare for payload interrupts */
    759              pFuncRxState = &rxPayloadIsr;
    760              rxPrepPayload();
    761            }
    762            else
    763            {
    764              /* need to read and process addressing fields, prepare for address interrupt */
    765              rxNextLen = addrLen;
    766              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    767              pFuncRxState = &rxAddrIsr;
    768            }
    769          }
    770          
    771          
    772          /*=================================================================================================
    773           * @fn          rxAddrIsr
    774           *
    775           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    776           *              from the incoming packet.
    777           *
    778           * @param       none
    779           *
    780           * @return      none
    781           *=================================================================================================
    782           */
    783          static void rxAddrIsr(void)
    784          {
    785            uint8 buf[MAX_ADDR_FIELDS_LEN];
    786            uint8 dstAddrMode;
    787            uint8 srcAddrMode;
    788            uint8  * p;
    789          
    790            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
    791          
    792            /*  read out address fields into local buffer in one shot */
    793            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    794          
    795            /* set pointer to buffer with addressing fields */
    796            p = buf;
    797          
    798            /* destination address */
    799            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
    800            if (dstAddrMode != SADDR_MODE_NONE)
    801            {
    802              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
    803              p += MAC_PAN_ID_FIELD_LEN;
    804              if (dstAddrMode == SADDR_MODE_EXT)
    805              {
    806                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
    807                p += MAC_EXT_ADDR_FIELD_LEN;
    808              }
    809              else
    810              {
    811                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
    812                p += MAC_SHORT_ADDR_FIELD_LEN;
    813              }
    814            }
    815          
    816            /* sources address */
    817            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
    818            if (srcAddrMode != SADDR_MODE_NONE)
    819            {
    820              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
    821              {
    822                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
    823                p += MAC_PAN_ID_FIELD_LEN;
    824              }
    825              if (srcAddrMode == SADDR_MODE_EXT)
    826              {
    827                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
    828              }
    829              else
    830              {
    831                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
    832              }
    833            }
    834          
    835            /*-------------------------------------------------------------------------------
    836             *  Prepare for payload interrupts.
    837             */
    838            pFuncRxState = &rxPayloadIsr;
    839            rxPrepPayload();
    840          }
    841          
    842          
    843          /*=================================================================================================
    844           * @fn          rxPrepPayload
    845           *
    846           * @brief       Common code to prepare for the payload ISR.
    847           *
    848           * @param       none
    849           *
    850           * @return      none
    851           *=================================================================================================
    852           */
    853          static void rxPrepPayload(void)
    854          {
    855            if (rxPayloadLen == 0)
    856            {
    857              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
    858              pFuncRxState = &rxFcsIsr;
    859            }
    860            else
    861            {
    862              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
    863              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    864            }
    865          }
    866          
    867          
    868          /*=================================================================================================
    869           * @fn          rxPayloadIsr
    870           *
    871           * @brief       Receive ISR state for reading out and storing the packet payload.
    872           *
    873           * @param       none
    874           *
    875           * @return      none
    876           *=================================================================================================
    877           */
    878          static void rxPayloadIsr(void)
    879          {
    880            MAC_RADIO_READ_RX_FIFO(pRxBuf->msdu.p, rxNextLen);
    881            pRxBuf->msdu.p += rxNextLen;
    882            rxPayloadLen -= rxNextLen;
    883          
    884            rxPrepPayload();
    885          }
    886          
    887          
    888          /*=================================================================================================
    889           * @fn          rxFcsIsr
    890           *
    891           * @brief       Receive ISR state for handling the FCS.
    892           *
    893           * @param       none
    894           *
    895           * @return      none
    896           *=================================================================================================
    897           */
    898          static void rxFcsIsr(void)
    899          {
    900            uint8 crcOK;
    901            uint8 ackWithPending = 0;
    902          
    903            /* read FCS, rxBuf is now available storage */
    904            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
    905          
    906            /*
    907             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
    908             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
    909             *    1) the RSSI value
    910             *    2) the average correlation value (used for LQI)
    911             *    3) a CRC passed bit
    912             */
    913          
    914            /* save the "CRC-is-OK" status */
    915            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
    916          
    917            /*
    918             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
    919             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
    920             *  a special variant of promiscuous mode is active.
    921             */
    922            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
    923            {
    924              int8 rssiDbm;
    925              uint8 corr;
    926          
    927              /*
    928               *  As power saving optimization, set state variable to indicate physical receive
    929               *  has completed and then request turning of the receiver.  This means the receiver
    930               *  can be off (if other conditions permit) during execution of the callback function.
    931               *
    932               *  The receiver will be requested to turn off once again at the end of the receive
    933               *  logic.  There is no harm in doing this.
    934               */
    935              macRxActive = MAC_RX_ACTIVE_DONE;
    936              macRxOffRequest();
    937          
    938              /* decode RSSI and correlation values */
    939              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
    940              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    941              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
    942          
    943              /* Read the source matching result back */
    944              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
    945              {
    946                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
    947                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
    948              }
    949          
    950              /* record parameters that get passed up to high-level */
    951              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
    952              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
    953              pRxBuf->mac.rssi = rssiDbm;
    954              pRxBuf->mac.correlation = corr;
    955          
    956              /* set the MSDU pointer to point at start of data */
    957              pRxBuf->msdu.p = (uint8 *) (pRxBuf + 1);
    958          
    959              /* finally... execute callback function */
    960              macRxCompleteCallback(pRxBuf);
    961              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
    962            }
    963            else
    964            {
    965              /*
    966               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
    967               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
    968               *  slightly more efficient to do so.)
    969               */
    970              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
    971              macRxOutgoingAckFlag = 0;
    972          
    973              /* the CRC failed so the packet must be discarded */
    974              MEM_FREE((uint8 **)&pRxBuf);
    975              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
    976            }
    977          
    978            /* reset threshold level, reset receive state, and complete receive logic */
    979            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
    980            pFuncRxState = &rxStartIsr;
    981            rxDone();
    982          }
    983          
    984          
    985          /*=================================================================================================
    986           * @fn          rxDone
    987           *
    988           * @brief       Common exit point for receive.
    989           *
    990           * @param       none
    991           *
    992           * @return      none
    993           *=================================================================================================
    994           */
    995          static void rxDone(void)
    996          {
    997            /* if the receive FIFO has overflowed, flush it here */
    998            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
    999            {
   1000              MAC_RADIO_FLUSH_RX_FIFO();
   1001            }
   1002          
   1003            /* mark receive as inactive */
   1004            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   1005          
   1006            /* if there is no outgoing ACK, run the post receive updates */
   1007            if (!macRxOutgoingAckFlag)
   1008            {
   1009              rxPostRxUpdates();
   1010            }
   1011          }
   1012          
   1013          
   1014          /**************************************************************************************************
   1015           * @fn          macRxAckTxDoneCallback
   1016           *
   1017           * @brief       Function called when the outoing ACK has completed transmitting.
   1018           *
   1019           * @param       none
   1020           *
   1021           * @return      none
   1022           **************************************************************************************************
   1023           */
   1024          void macRxAckTxDoneCallback(void)
   1025          {
   1026            macRxOutgoingAckFlag = 0;
   1027          
   1028            /*
   1029             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1030             *  could be executed before the primary receive logic completes.  To prevent this, the
   1031             *  post updates are only executed if receive logic is no longer active.  In the case the
   1032             *  post updates are not executed here, they will execute when the main receive logic
   1033             *  completes.
   1034             */
   1035            if (!macRxActive)
   1036            {
   1037              rxPostRxUpdates();
   1038            }
   1039          }
   1040          
   1041          
   1042          /*=================================================================================================
   1043           * @fn          rxPostRxUpdates
   1044           *
   1045           * @brief       Updates that need to be performed once receive is complete.
   1046           *
   1047           *              It is not fatal to execute this function if somehow receive is active.  Under
   1048           *              certain timing/interrupt conditions a new receive may have started before this
   1049           *              function executes.  This should happen very rarely (if it happens at all) and
   1050           *              would cause no problems.
   1051           *
   1052           * @param       none
   1053           *
   1054           * @return      none
   1055           *=================================================================================================
   1056           */
   1057          static void rxPostRxUpdates(void)
   1058          {
   1059            /* turn off receiver if permitted */
   1060            macRxOffRequest();
   1061          
   1062            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1063            macRadioUpdateTxPower();
   1064          
   1065            /* initiate and transmit that was queued during receive */
   1066            macTxStartQueuedFrame();
   1067          }
   1068          
   1069          
   1070          /*=================================================================================================
   1071           * @fn          rxDiscardFrame
   1072           *
   1073           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1074           *
   1075           * @param       none
   1076           *
   1077           * @return      none
   1078           *=================================================================================================
   1079           */
   1080          static void rxDiscardFrame(void)
   1081          {
   1082            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   1083          
   1084            if (rxUnreadLen == 0)
   1085            {
   1086              rxDone();
   1087            }
   1088            else
   1089            {
   1090              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   1091              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   1092              pFuncRxState = &rxDiscardIsr;
   1093            }
   1094          }
   1095          
   1096          
   1097          /*=================================================================================================
   1098           * @fn          rxDiscardIsr
   1099           *
   1100           * @brief       Receive ISR state for discarding a packet.
   1101           *
   1102           * @param       none
   1103           *
   1104           * @return      none
   1105           *=================================================================================================
   1106           */
   1107          static void rxDiscardIsr(void)
   1108          {
   1109            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1110          
   1111            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   1112            rxUnreadLen -= rxNextLen;
   1113          
   1114            /* read out and discard bytes until all bytes of packet are disposed of */
   1115            if (rxUnreadLen != 0)
   1116            {
   1117              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   1118              {
   1119                rxNextLen = rxUnreadLen;
   1120                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   1121              }
   1122            }
   1123            else
   1124            {
   1125              /* reset threshold level, reset receive state, and complete receive logic */
   1126              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   1127              pFuncRxState = &rxStartIsr;
   1128              rxDone();
   1129            }
   1130          }
   1131          
   1132          
   1133          /**************************************************************************************************
   1134           * @fn          maxRxRifoOverflowIsr
   1135           *
   1136           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1137           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1138           *              It simply halts and cleanup the RX.
   1139           *
   1140           * @param       none
   1141           *
   1142           * @return      none
   1143           **************************************************************************************************
   1144           */
   1145          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   1146          {
   1147            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   1148            macRxHaltCleanup();
   1149          }
   1150          
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          macRxPromiscuousMode
   1154           *
   1155           * @brief       Sets promiscuous mode - enabling or disabling it.
   1156           *
   1157           * @param       none
   1158           *
   1159           * @return      none
   1160           **************************************************************************************************
   1161           */
   1162          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   1163          {
   1164            rxPromiscuousMode = mode;
   1165          
   1166            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   1167            {
   1168                MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   1169            }
   1170            else
   1171            {
   1172              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1173                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   1174          
   1175              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   1176            }
   1177          }
   1178          
   1179          
   1180          
   1181          /**************************************************************************************************
   1182           *                                  Compile Time Integrity Checks
   1183           **************************************************************************************************
   1184           */
   1185          
   1186          /* check for changes to the spec that would affect the source code */
   1187          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1188               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1189               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1190               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1191               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1192               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1193               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1194               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1195               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1196          #error "ERROR!  Change to the spec that requires modification of source code."
   1197          #endif
   1198          
   1199          /* check for changes to the internal flags format */
   1200          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1201               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1202               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1203               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1204               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1205               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1206          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1207          #endif
   1208          
   1209          /* validate CRC OK bit optimization */
   1210          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1211          #error "ERROR!  Optimization relies on these bits having the same position."
   1212          #endif
   1213          
   1214          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1215          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1216          #endif
   1217          
   1218          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1219          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1220          #endif
   1221          
   1222          
   1223          /**************************************************************************************************
   1224          */

Errors: 26
Warnings: 2

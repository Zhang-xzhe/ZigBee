###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2021  11:31:00 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\osal\common\OSAL_Timers.c                       #
#    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\osal\common\OSAL_Timers.c -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\CoordinatorEB\List\ -lA                    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\ --diag_suppress Pe001,Pa010 -o                 #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\ -I           #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\SOURCE\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\OSAL_Timers.lst                                 #
#    Object file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\OSAL_Timers.r51                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2009-11-09 20:57:31 -0800 (Mon, 09 Nov 2009) $
      4            Revision:       $Revision: 21110 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

    for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",228  Error[Pe169]: 
          expected a declaration

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe077]: 
          this declaration has no storage class or type specifier

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr CLKCONCMD" (declared at line 200 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",230  Error[Pe169]: 
          expected a declaration

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe077]: 
          this declaration has no storage class or type specifier

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr SLEEPCMD" (declared at line 190 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe065]: 
          expected a ";"

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe007]: 
          unrecognized token

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                       ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe007]: 
          unrecognized token

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe169]: 
          expected a declaration

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe077]: 
          this declaration has no storage class or type specifier

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P1DIR"
          (declared at line 268 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    LED3_DDR |= LED3_BV;                                           \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe077]: 
          this declaration has no storage class or type specifier

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P0INP"
          (declared at line 131 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe007]: 
          unrecognized token

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe169]: 
          expected a declaration

  typedef void (*halUARTCBack_t) (uint8 port, uint8 event);
                                                          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\INCLUDE\hal_uart.h",119  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    halUARTCBack_t      callBackFunc;
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\INCLUDE\hal_uart.h",141  Error[Pe020]: 
          identifier "halUARTCBack_t" is undefined
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef struct
     63          {
     64            void   *next;
     65            uint16 timeout;
     66            uint16 event_flag;
     67            uint8  task_id;
     68            uint16 reloadTimeout;
     69          } osalTimerRec_t;
     70          
     71          /*********************************************************************
     72           * GLOBAL VARIABLES
     73           */
     74          
     75          osalTimerRec_t *timerHead;
     76          
     77          /*********************************************************************
     78           * EXTERNAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */
     88          // Milliseconds since last reboot
     89          static uint32 osal_systemClock;
     90          
     91          /*********************************************************************
     92           * LOCAL FUNCTION PROTOTYPES
     93           */
     94          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout );
     95          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
     96          void osalDeleteTimer( osalTimerRec_t *rmTimer );
     97          
     98          /*********************************************************************
     99           * FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn      osalTimerInit
    104           *
    105           * @brief   Initialization for the OSAL Timer System.
    106           *
    107           * @param   none
    108           *
    109           * @return
    110           */
    111          void osalTimerInit( void )
    112          {
    113            osal_systemClock = 0;
    114          }
    115          
    116          /*********************************************************************
    117           * @fn      osalAddTimer
    118           *
    119           * @brief   Add a timer to the timer list.
    120           *          Ints must be disabled.
    121           *
    122           * @param   task_id
    123           * @param   event_flag
    124           * @param   timeout
    125           *
    126           * @return  osalTimerRec_t * - pointer to newly created timer
    127           */
    128          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint16 timeout )
    129          {
    130            osalTimerRec_t *newTimer;
    131            osalTimerRec_t *srchTimer;
    132          
    133            // Look for an existing timer first
    134            newTimer = osalFindTimer( task_id, event_flag );
    135            if ( newTimer )
    136            {
    137              // Timer is found - update it.
    138              newTimer->timeout = timeout;
    139          
    140              return ( newTimer );
    141            }
    142            else
    143            {
    144              // New Timer
    145              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
    146          
    147              if ( newTimer )
    148              {
    149                // Fill in new timer
    150                newTimer->task_id = task_id;
    151                newTimer->event_flag = event_flag;
    152                newTimer->timeout = timeout;
    153                newTimer->next = (void *)NULL;
    154                newTimer->reloadTimeout = 0;
    155          
    156                // Does the timer list already exist
    157                if ( timerHead == NULL )
    158                {
    159                  // Start task list
    160                  timerHead = newTimer;
    161                }
    162                else
    163                {
    164                  // Add it to the end of the timer list
    165                  srchTimer = timerHead;
    166          
    167                  // Stop at the last record
    168                  while ( srchTimer->next )
    169                    srchTimer = srchTimer->next;
    170          
    171                  // Add to the list
    172                  srchTimer->next = newTimer;
    173                }
    174          
    175                return ( newTimer );
    176              }
    177              else
    178                return ( (osalTimerRec_t *)NULL );
    179            }
    180          }
    181          
    182          /*********************************************************************
    183           * @fn      osalFindTimer
    184           *
    185           * @brief   Find a timer in a timer list.
    186           *          Ints must be disabled.
    187           *
    188           * @param   task_id
    189           * @param   event_flag
    190           *
    191           * @return  osalTimerRec_t *
    192           */
    193          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
    194          {
    195            osalTimerRec_t *srchTimer;
    196          
    197            // Head of the timer list
    198            srchTimer = timerHead;
    199          
    200            // Stop when found or at the end
    201            while ( srchTimer )
    202            {
    203              if ( srchTimer->event_flag == event_flag &&
    204                   srchTimer->task_id == task_id )
    205                break;
    206          
    207              // Not this one, check another
    208              srchTimer = srchTimer->next;
    209            }
    210          
    211            return ( srchTimer );
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      osalDeleteTimer
    216           *
    217           * @brief   Delete a timer from a timer list.
    218           *
    219           * @param   table
    220           * @param   rmTimer
    221           *
    222           * @return  none
    223           */
    224          void osalDeleteTimer( osalTimerRec_t *rmTimer )
    225          {
    226            // Does the timer list really exist
    227            if ( rmTimer )
    228            {
    229              // Clear the event flag and osalTimerUpdate() will delete 
    230              // the timer from the list.
    231              rmTimer->event_flag = 0;
    232            }
    233          }
    234          
    235          /*********************************************************************
    236           * @fn      osal_start_timerEx
    237           *
    238           * @brief
    239           *
    240           *   This function is called to start a timer to expire in n mSecs.
    241           *   When the timer expires, the calling task will get the specified event.
    242           *
    243           * @param   uint8 taskID - task id to set timer for
    244           * @param   uint16 event_id - event to be notified with
    245           * @param   UNINT16 timeout_value - in milliseconds.
    246           *
    247           * @return  SUCCESS, or NO_TIMER_AVAIL.
    248           */
    249          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint16 timeout_value )
    250          {
    251            halIntState_t intState;
    252            osalTimerRec_t *newTimer;
    253          
    254            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    255          
    256            // Add timer
    257            newTimer = osalAddTimer( taskID, event_id, timeout_value );
    258          
    259            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    260          
    261            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
    262          }
    263          
    264          /*********************************************************************
    265           * @fn      osal_start_reload_timer
    266           *
    267           * @brief
    268           *
    269           *   This function is called to start a timer to expire in n mSecs.
    270           *   When the timer expires, the calling task will get the specified event
    271           *   and the timer will be reloaded with the timeout value.
    272           *
    273           * @param   uint8 taskID - task id to set timer for
    274           * @param   uint16 event_id - event to be notified with
    275           * @param   UNINT16 timeout_value - in milliseconds.
    276           *
    277           * @return  SUCCESS, or NO_TIMER_AVAIL.
    278           */
    279          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint16 timeout_value )
    280          {
    281            halIntState_t intState;
    282            osalTimerRec_t *newTimer;
    283          
    284            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    285          
    286            // Add timer
    287            newTimer = osalAddTimer( taskID, event_id, timeout_value );
    288            if ( newTimer )
    289            {
    290              // Load the reload timeout value
    291              newTimer->reloadTimeout = timeout_value;
    292            }
    293          
    294            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    295          
    296            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
    297          }
    298          
    299          /*********************************************************************
    300           * @fn      osal_stop_timerEx
    301           *
    302           * @brief
    303           *
    304           *   This function is called to stop a timer that has already been started.
    305           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    306           *   associated with the timer from being set for the calling task.
    307           *
    308           * @param   uint8 task_id - task id of timer to stop
    309           * @param   uint16 event_id - identifier of the timer that is to be stopped
    310           *
    311           * @return  SUCCESS or INVALID_EVENT_ID
    312           */
    313          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
    314          {
    315            halIntState_t intState;
    316            osalTimerRec_t *foundTimer;
    317          
    318            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    319          
    320            // Find the timer to stop
    321            foundTimer = osalFindTimer( task_id, event_id );
    322            if ( foundTimer )
    323            {
    324              osalDeleteTimer( foundTimer );
    325            }
    326          
    327            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    328          
    329            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
    330          }
    331          
    332          /*********************************************************************
    333           * @fn      osal_get_timeoutEx
    334           *
    335           * @brief
    336           *
    337           * @param   uint8 task_id - task id of timer to check
    338           * @param   uint16 event_id - identifier of timer to be checked
    339           *
    340           * @return  Return the timer's tick count if found, zero otherwise.
    341           */
    342          uint16 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
    343          {
    344            halIntState_t intState;
    345            uint16 rtrn = 0;
    346            osalTimerRec_t *tmr;
    347          
    348            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    349          
    350            tmr = osalFindTimer( task_id, event_id );
    351          
    352            if ( tmr )
    353            {
    354              rtrn = tmr->timeout;
    355            }
    356          
    357            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    358          
    359            return rtrn;
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      osal_timer_num_active
    364           *
    365           * @brief
    366           *
    367           *   This function counts the number of active timers.
    368           *
    369           * @return  uint8 - number of timers
    370           */
    371          uint8 osal_timer_num_active( void )
    372          {
    373            halIntState_t intState;
    374            uint8 num_timers = 0;
    375            osalTimerRec_t *srchTimer;
    376          
    377            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    378          
    379            // Head of the timer list
    380            srchTimer = timerHead;
    381          
    382            // Count timers in the list
    383            while ( srchTimer != NULL )
    384            {
    385              num_timers++;
    386              srchTimer = srchTimer->next;
    387            }
    388          
    389            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    390          
    391            return num_timers;
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      osalTimerUpdate
    396           *
    397           * @brief   Update the timer structures for a timer tick.
    398           *
    399           * @param   none
    400           *
    401           * @return  none
    402           *********************************************************************/
    403          void osalTimerUpdate( uint16 updateTime )
    404          {
    405            halIntState_t intState;
    406            osalTimerRec_t *srchTimer;
    407            osalTimerRec_t *prevTimer;
    408          
    409            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    410            // Update the system time
    411            osal_systemClock += updateTime;
    412            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    413          
    414            // Look for open timer slot
    415            if ( timerHead != NULL )
    416            {
    417              // Add it to the end of the timer list
    418              srchTimer = timerHead;
    419              prevTimer = (void *)NULL;
    420          
    421              // Look for open timer slot
    422              while ( srchTimer )
    423              {
    424                osalTimerRec_t *freeTimer = NULL;
    425               
    426                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    427                
    428                if (srchTimer->timeout <= updateTime)
    429                {
    430                  srchTimer->timeout = 0;
    431                }
    432                else
    433                {
    434                  srchTimer->timeout = srchTimer->timeout - updateTime;
    435                }
    436                
    437                // Check for reloading
    438                if ( (srchTimer->timeout == 0) && (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
    439                {
    440                  // Notify the task of a timeout
    441                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    442                  
    443                  // Reload the timer timeout value
    444                  srchTimer->timeout = srchTimer->reloadTimeout;
    445                }
    446                
    447                // When timeout or delete (event_flag == 0)
    448                if ( srchTimer->timeout == 0 || srchTimer->event_flag == 0 )
    449                {
    450                  // Take out of list
    451                  if ( prevTimer == NULL )
    452                    timerHead = srchTimer->next;
    453                  else
    454                    prevTimer->next = srchTimer->next;
    455          
    456                  // Setup to free memory
    457                  freeTimer = srchTimer;
    458          
    459                  // Next
    460                  srchTimer = srchTimer->next;
    461                }
    462                else
    463                {
    464                  // Get next
    465                  prevTimer = srchTimer;
    466                  srchTimer = srchTimer->next;
    467                }
    468                
    469                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
    470                
    471                if ( freeTimer )
    472                {
    473                  if ( freeTimer->timeout == 0 )
    474                  {
    475                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
    476                  }
    477                  osal_mem_free( freeTimer );
    478                }
    479              }
    480            }
    481          }
    482          
    483          #ifdef POWER_SAVING
    484          /*********************************************************************
    485           * @fn      osal_adjust_timers
    486           *
    487           * @brief   Update the timer structures for elapsed ticks.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           *********************************************************************/
    493          void osal_adjust_timers( void )
    494          {
    495            uint16 eTime;
    496          
    497            if ( timerHead != NULL )
    498            {
    499              // Compute elapsed time (msec)
    500              eTime = TimerElapsed() /  TICK_COUNT;
    501          
    502              if ( eTime )
    503                osalTimerUpdate( eTime );
    504            }
    505          }
    506          
    507          /*********************************************************************
    508           * @fn      osal_next_timeout
    509           *
    510           * @brief
    511           *
    512           *   Search timer table to return the lowest timeout value. If the
    513           *   timer list is empty, then the returned timeout will be zero.
    514           *
    515           * @param   none
    516           *
    517           * @return  none
    518           *********************************************************************/
    519          uint16 osal_next_timeout( void )
    520          {
    521            uint16 nextTimeout;
    522            osalTimerRec_t *srchTimer;
    523          
    524            if ( timerHead != NULL )
    525            {
    526              // Head of the timer list
    527              srchTimer = timerHead;
    528              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    529          
    530              // Look for the next timeout timer
    531              while ( srchTimer != NULL )
    532              {
    533                if (srchTimer->timeout < nextTimeout)
    534                {
    535                  nextTimeout = srchTimer->timeout;
    536                }
    537                // Check next timer
    538                srchTimer = srchTimer->next;
    539              }
    540            }
    541            else
    542            {
    543              // No timers
    544              nextTimeout = 0;
    545            }
    546          
    547            return ( nextTimeout );
    548          }
    549          #endif // POWER_SAVING
    550          
    551          /*********************************************************************
    552           * @fn      osal_GetSystemClock()
    553           *
    554           * @brief   Read the local system clock.
    555           *
    556           * @param   none
    557           *
    558           * @return  local clock in milliseconds
    559           */
    560          uint32 osal_GetSystemClock( void )
    561          {
    562            return ( osal_systemClock );
    563          }
    564          
    565          /*********************************************************************
    566          *********************************************************************/

Errors: 25
Warnings: 2

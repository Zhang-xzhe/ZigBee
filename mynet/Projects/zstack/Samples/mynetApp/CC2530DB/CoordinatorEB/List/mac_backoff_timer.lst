###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2021  11:31:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\mac\low_level\srf04\mac_backoff_timer.c         #
#    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\mac\low_level\srf04\mac_backoff_timer.c -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -lC                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\ -lA C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\ #
#                          Projects\zstack\Samples\mynetApp\CC2530DB\Coordina #
#                          torEB\List\ --diag_suppress Pe001,Pa010 -o         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\ -I           #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\SOURCE\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\mac_backoff_timer.lst                           #
#    Object file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\mac_backoff_timer.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Components\mac\low_level\srf04\mac_backoff_timer.c
      1          /**************************************************************************************************
      2            Filename:       mac_backoff_timer.c
      3            Revised:        $Date: 2007-09-11 10:58:41 -0700 (Tue, 11 Sep 2007) $
      4            Revision:       $Revision: 15371 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                           Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          #include "hal_mcu.h"
     48          
     49          /* high-level specific */
     50          #include "mac_spec.h"
     51          
     52          /* exported low-level */
     53          #include "mac_low_level.h"
     54          
     55          /* low-level specific */
     56          #include "mac_backoff_timer.h"
     57          #include "mac_tx.h"
     58          
     59          /* target specific */
     60          #include "mac_radio_defs.h"

    for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",228  Error[Pe169]: 
          expected a declaration

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe077]: 
          this declaration has no storage class or type specifier

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr CLKCONCMD" (declared at line 200 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",230  Error[Pe169]: 
          expected a declaration

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe077]: 
          this declaration has no storage class or type specifier

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr SLEEPCMD" (declared at line 190 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe065]: 
          expected a ";"

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe007]: 
          unrecognized token

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                       ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe007]: 
          unrecognized token

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe169]: 
          expected a declaration

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe077]: 
          this declaration has no storage class or type specifier

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P1DIR"
          (declared at line 268 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    LED3_DDR |= LED3_BV;                                           \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe077]: 
          this declaration has no storage class or type specifier

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P0INP"
          (declared at line 131 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe007]: 
          unrecognized token

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe169]: 
          expected a declaration

  extern uint8 macChipVersion;
                             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\mac_mcu.h",193  Warning[Pe012]: 
          parsing restarts here after previous syntax error
     61          
     62          /* debug */
     63          #include "mac_assert.h"
     64          
     65          
     66          /* ------------------------------------------------------------------------------------------------
     67           *                                            Defines
     68           * ------------------------------------------------------------------------------------------------
     69           */
     70          #define COMPARE_STATE_ROLLOVER_BV                 BV(0)
     71          #define COMPARE_STATE_TRIGGER_BV                  BV(1)
     72          #define COMPARE_STATE_ARM_BV                      BV(2)
     73          
     74          #define COMPARE_STATE_TRIGGER                     COMPARE_STATE_TRIGGER_BV
     75          #define COMPARE_STATE_ROLLOVER                    COMPARE_STATE_ROLLOVER_BV
     76          #define COMPARE_STATE_ROLLOVER_AND_TRIGGER        (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_TRIGGER_BV)
     77          #define COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER    (COMPARE_STATE_ROLLOVER_BV | COMPARE_STATE_ARM_BV)
     78          
     79          
     80          /*
     81           *  The datasheet mentions a small delay on both receive and transmit side of approximately
     82           *  two microseconds.  The precise characterization is given below.
     83           *  (This data is not given in rev 1.03 datasheet)
     84           */
     85          #define RX_TX_PROP_DELAY_AVG_USEC         ((MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC + MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC) / 2)
     86          #define RX_TX_PROP_DELAY_AVG_TIMER_TICKS  ((uint16)(MAC_RADIO_TIMER_TICKS_PER_USEC() * RX_TX_PROP_DELAY_AVG_USEC + 0.5))
     87          
     88          /*
     89           *  For slotted receives, the SFD signal is expected to occur on a specifc symbol boundary.
     90           *  This does *not* correspond to the backoff boundary.  The SFD signal occurs at an
     91           *  offset from the backoff boundary.  This is done for efficiency of related algorithms.
     92           *
     93           *  Once transmit is strobed there is a fixed delay until the SFD signal occurs.  The frame
     94           *  does not start over-the-air transmit until after an internal radio delay of 12 symbols.
     95           *  Once transmitting over-the-air, the preamble is sent (8 symbols) followed by the
     96           *  SFD field (2 symbols). After the SFD field completes, the SFD signal occurs.  This
     97           *  adds up to a total of 22 symbols from strobe to SFD signal.
     98           *
     99           *  Since 22 symbols spans more than a backoff (20 symbols) the modulus operation is used
    100           *  to find the symbol offset which is 2 symbols.
    101           *
    102           *  This math is derived formally via the pre-processor.
    103           */
    104          #define SYMBOLS_FROM_STROBE_TO_PREAMBLE   12 /* from datasheet */
    105          #define SYMBOLS_FROM_PREAMBLE_TO_SFD      (MAC_SPEC_PREAMBLE_FIELD_LENGTH + MAC_SPEC_SFD_FIELD_LENGTH)
    106          #define SYMBOLS_FROM_STROBE_TO_SFD        (SYMBOLS_FROM_STROBE_TO_PREAMBLE + SYMBOLS_FROM_PREAMBLE_TO_SFD)
    107          #define SYMBOLS_EXPECTED_AT_SFD           (SYMBOLS_FROM_STROBE_TO_SFD % MAC_A_UNIT_BACKOFF_PERIOD)
    108          
    109          /* after all that formal math, make sure the result is as expected */
    110          #if (SYMBOLS_EXPECTED_AT_SFD != 2)
    111          #error "ERROR! Internal problem with pre-processor math of slotted alignment."
    112          #endif
    113          
    114          
    115          /*
    116           *  The expected SFD signal occurs at the symbol offset *plus* a small internal propagation delay
    117           *  internal to the radio.  This delay is given as the sum of a receive side delay and a transmit
    118           *  side delay.  When this delay is subtracted from the internal timer, the internal time base
    119           *  actually becomes the actual receive time *minus* the transmit delay.  This works out though.
    120           *  The transmit logic does *not* take into account this delay.  Since the timer is skewed by the
    121           *  transmit delay already, the transmits go out precisely on time.
    122           */
    123          #define TIMER_TICKS_EXPECTED_AT_SFD   ((SYMBOLS_EXPECTED_AT_SFD * MAC_RADIO_TIMER_TICKS_PER_SYMBOL()) \
    124                                                    + RX_TX_PROP_DELAY_AVG_TIMER_TICKS)
    125          
    126          
    127          /* ------------------------------------------------------------------------------------------------
    128           *                                         Local Variables
    129           * ------------------------------------------------------------------------------------------------
    130           */
    131          static uint32 backoffTimerRollover;
    132          static uint32 backoffTimerTrigger;
    133          static uint8 compareState;
    134          
    135          
    136          /**************************************************************************************************
    137           * @fn          macBackoffTimerInit
    138           *
    139           * @brief       Intializes backoff timer.
    140           *
    141           * @param       none
    142           *
    143           * @return      none
    144           **************************************************************************************************
    145           */
    146          MAC_INTERNAL_API void macBackoffTimerInit(void)
    147          {
    148            compareState = COMPARE_STATE_ROLLOVER;
    149            MAC_RADIO_BACKOFF_SET_COUNT(0);
    150            macBackoffTimerSetRollover(MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER);
    151            MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT();
    152            MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT();
    153          }
    154          
    155          
    156          /**************************************************************************************************
    157           * @fn          macBackoffTimerReset
    158           *
    159           * @brief       Resets backoff timer.
    160           *
    161           * @param       none
    162           *
    163           * @return      none
    164           **************************************************************************************************
    165           */
    166          MAC_INTERNAL_API void macBackoffTimerReset(void)
    167          {
    168            MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT();
    169            macBackoffTimerInit();
    170          }
    171          
    172          
    173          /**************************************************************************************************
    174           * @fn          macBackoffTimerSetRollover
    175           *
    176           * @brief       Set rollover count of backoff timer.
    177           *
    178           * @param       rolloverBackoff - backoff count where count is reset to zero
    179           *
    180           * @return      none
    181           **************************************************************************************************
    182           */
    183          MAC_INTERNAL_API void macBackoffTimerSetRollover(uint32 rolloverBackoff)
    184          {
    185            halIntState_t  s;
    186          
    187            MAC_ASSERT(rolloverBackoff > MAC_RADIO_BACKOFF_COUNT());  /* rollover value must be greater than count */
    188          
    189            HAL_ENTER_CRITICAL_SECTION(s);
    190            backoffTimerRollover = rolloverBackoff;
    191            MAC_RADIO_BACKOFF_SET_COMPARE(rolloverBackoff);
    192            HAL_EXIT_CRITICAL_SECTION(s);
    193          }
    194          
    195          
    196          /**************************************************************************************************
    197           * @fn          macBackoffTimerSetCount
    198           *
    199           * @brief       Sets the count of the backoff timer.
    200           *
    201           * @param       backoff - new count
    202           *
    203           * @return      none
    204           **************************************************************************************************
    205           */
    206          MAC_INTERNAL_API void macBackoffTimerSetCount(uint32 backoff)
    207          {
    208            halIntState_t  s;
    209          
    210            MAC_ASSERT(compareState == COMPARE_STATE_ROLLOVER);   /* trigger cannot be active if changing count */
    211            MAC_ASSERT(backoff < backoffTimerRollover);  /* count must be less than rollover value */
    212            MAC_ASSERT(!(backoff & 0x80000000));  /* count must not represent negative value for int32 */
    213          
    214            HAL_ENTER_CRITICAL_SECTION(s);
    215            MAC_RADIO_BACKOFF_SET_COUNT(backoff);
    216            HAL_EXIT_CRITICAL_SECTION(s);
    217          }
    218          
    219          
    220          /**************************************************************************************************
    221           * @fn          macBackoffTimerCount
    222           *
    223           * @brief       Returns the current backoff count.
    224           *
    225           * @param       none
    226           *
    227           * @return      current backoff count
    228           **************************************************************************************************
    229           */
    230          MAC_INTERNAL_API uint32 macBackoffTimerCount(void)
    231          {
    232            halIntState_t  s;
    233            uint32 backoffCount;
    234          
    235            HAL_ENTER_CRITICAL_SECTION(s);
    236            backoffCount = MAC_RADIO_BACKOFF_COUNT();
    237            HAL_EXIT_CRITICAL_SECTION(s);
    238            
    239          #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
    240            /*
    241             *  Extra processing is required if the radio has a special hardware overflow
    242             *  count feature.  Unfortunately this feature does not provide for setting a
    243             *  rollover value.  This must be done manually.
    244             *
    245             *  This means there is a small window in time when reading the hardware count
    246             *  will be inaccurate.  It's possible it could be one more than the allowable
    247             *  count.  This happens if the count has just incremented beyond the maximum
    248             *  and is queried before the ISR has a chance to run and reset the backoff
    249             *  count back to zero.  (Pure software implementation of backoff count does
    250             *  not have this problem.)
    251             *
    252             *  To solve this, before returning a value for the backoff count, the value
    253             *  must be tested to see if it is beyond the maximum value.  If so, a rollover
    254             *  interrupt that will set backoff count to zero is imminent.  In that case,
    255             *  the correct backoff count of zero is returned.
    256             */
    257            if (backoffCount >= backoffTimerRollover)
    258            {
    259              return(0);
    260            }
    261          #endif
    262            
    263            return(backoffCount);
    264          }
    265          
    266          
    267          /**************************************************************************************************
    268           * @fn          macBackoffTimerCapture
    269           *
    270           * @brief       Returns the most recently captured backoff count
    271           *
    272           * @param       none
    273           *
    274           * @return      last backoff count that was captured
    275           **************************************************************************************************
    276           */
    277          MAC_INTERNAL_API uint32 macBackoffTimerCapture(void)
    278          {
    279            halIntState_t  s;
    280            uint32 backoffCapture;
    281          
    282            HAL_ENTER_CRITICAL_SECTION(s);
    283            backoffCapture = MAC_RADIO_BACKOFF_CAPTURE();
    284            HAL_EXIT_CRITICAL_SECTION(s);
    285          
    286          #ifdef MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER
    287            /*
    288             *  See other instance of this #ifdef for detailed comments.
    289             *  Those comments apply to the backoff capture value too.
    290             */
    291            if (backoffCapture >= backoffTimerRollover)
    292            {
    293              return(0);
    294            }
    295          #endif
    296            
    297            return(backoffCapture);
    298          }
    299          
    300          
    301          /**************************************************************************************************
    302           * @fn          macBackoffTimerGetTrigger
    303           *
    304           * @brief       Returns the trigger set for the backoff timer.
    305           *
    306           * @param       none
    307           *
    308           * @return      backoff count of trigger
    309           **************************************************************************************************
    310           */
    311          MAC_INTERNAL_API uint32 macBackoffTimerGetTrigger(void)
    312          {
    313            return(backoffTimerTrigger);
    314          }
    315          
    316          
    317          /**************************************************************************************************
    318           * @fn          macBackoffTimerSetTrigger
    319           *
    320           * @brief       Sets the trigger count for the backoff counter.  A callback is exectuted when
    321           *              the backoff count reaches the trigger
    322           *
    323           * @param       triggerBackoff - backoff count for new trigger
    324           *
    325           * @return      none
    326           **************************************************************************************************
    327           */
    328          MAC_INTERNAL_API void macBackoffTimerSetTrigger(uint32 triggerBackoff)
    329          {
    330            halIntState_t  s;
    331          
    332            MAC_ASSERT(triggerBackoff < backoffTimerRollover); /* trigger backoff must be less than rollover backoff */
    333          
    334            HAL_ENTER_CRITICAL_SECTION(s);
    335            backoffTimerTrigger = triggerBackoff;
    336            if (triggerBackoff > MAC_RADIO_BACKOFF_COUNT())
    337            {
    338              compareState = COMPARE_STATE_TRIGGER;
    339              MAC_RADIO_BACKOFF_SET_COMPARE(triggerBackoff);
    340            }
    341            else
    342            {
    343              if (triggerBackoff == 0)
    344              {
    345                compareState = COMPARE_STATE_ROLLOVER_AND_TRIGGER;
    346              }
    347              else
    348              {
    349                compareState = COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER;
    350              }
    351              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
    352            }
    353            HAL_EXIT_CRITICAL_SECTION(s);
    354          }
    355          
    356          
    357          /**************************************************************************************************
    358           * @fn          macBackoffTimerCancelTrigger
    359           *
    360           * @brief       Cancels the trigger for the backoff counter.
    361           *
    362           * @param       none
    363           *
    364           * @return      none
    365           **************************************************************************************************
    366           */
    367          MAC_INTERNAL_API void macBackoffTimerCancelTrigger(void)
    368          {
    369            halIntState_t  s;
    370          
    371            HAL_ENTER_CRITICAL_SECTION(s);
    372            compareState = COMPARE_STATE_ROLLOVER;
    373            MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
    374            HAL_EXIT_CRITICAL_SECTION(s);
    375          }
    376          
    377          
    378          /**************************************************************************************************
    379           * @fn          macBackoffTimerRealign
    380           *
    381           * @brief       
    382           *
    383           *  Realignment is accomplished by adjusting the internal time base to align with the expected
    384           *  reception time of an incoming frame.  The difference between the expected reception time and
    385           *  the actual reception time is computed and this difference is used to adjust the hardware
    386           *  timer count and backoff count.
    387           *
    388           *  The realignment is based on the SFD signal for the incoming frame.  The timer is aligned
    389           *  by adjusting it with the difference between the expected SFD time and the actual SFD time.
    390           *
    391           * @param       none
    392           *
    393           * @return      none
    394           **************************************************************************************************
    395           */
    396          MAC_INTERNAL_API int32 macBackoffTimerRealign(macRx_t *pMsg)
    397          {
    398            uint16 timerDelayTicks;
    399            int32 backoffDelta;
    400            int32 backoffCount;
    401          
    402            MAC_ASSERT(!MAC_TX_IS_PHYSICALLY_ACTIVE()); /* realignment during actual transmit corrupts timing */
    403          
    404            /*-------------------------------------------------------------------------------
    405             *  Calculate the delta backoff difference between expected backoff count,
    406             *  which is zero, and the backoff count of the received frame.
    407             */
    408          
    409            /* since expected receive time is zero, the delta is simply the receive time */
    410            backoffDelta = pMsg->mac.timestamp;
    411          
    412            /* if the frame was received more than halfway to the rollover count, use a negative delta value */
    413            if (((uint32) backoffDelta) > (backoffTimerRollover / 2))
    414            {
    415              backoffDelta = backoffDelta - backoffTimerRollover;    /* result will be negative */
    416            }
    417          
    418            /*-------------------------------------------------------------------------------
    419             *  Calculate the number of timer ticks to delay that will align the internal
    420             *  time base with the received frame.
    421             */
    422          
    423            /* retrieve the timer count when frame was received */
    424            timerDelayTicks = pMsg->mac.timestamp2;
    425          
    426            /*
    427             *  Subtract the expected SFD time from the actual SFD time to find the needed
    428             *  timer adjustment. If subtracting the offset would result in a negative value,
    429             *  the tick delay must wrap around.
    430             */
    431            if (timerDelayTicks >= TIMER_TICKS_EXPECTED_AT_SFD)
    432            {
    433              /* since delay count is greater than or equal to offset, subtract it directly */
    434              timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD;
    435            }
    436            else
    437            {
    438              /*
    439               *  The expected time is greater that actualy time so it cannot be subtracted directly.
    440               *  The tick count per backoff is added to wrap around within the backoff.
    441               *  Since a wrap around did happen, the backoff delta is adjusted by one.
    442               */
    443              timerDelayTicks = timerDelayTicks - TIMER_TICKS_EXPECTED_AT_SFD + MAC_RADIO_TIMER_TICKS_PER_BACKOFF();
    444              backoffDelta--;
    445            }
    446          
    447            /*-------------------------------------------------------------------------------
    448             *  Calculate the new backoff count.
    449             */
    450          
    451            backoffCount = MAC_RADIO_BACKOFF_COUNT() - backoffDelta;
    452          
    453            if (backoffCount >= ((int32) backoffTimerRollover))
    454            {
    455              backoffCount -= backoffTimerRollover;
    456            }
    457            else if (backoffCount < 0)
    458            {
    459              backoffCount += backoffTimerRollover;
    460            }
    461          
    462            MAC_RADIO_TIMER_FORCE_DELAY(timerDelayTicks);
    463            MAC_RADIO_BACKOFF_SET_COUNT(backoffCount);
    464          
    465            return(backoffDelta);
    466          }
    467          
    468          
    469          /**************************************************************************************************
    470           * @fn          macBackoffTimerCompareIsr
    471           *
    472           * @brief       Interrupt service routine that fires when the backoff count is equal
    473           *              to the trigger count.
    474           *
    475           * @param       none
    476           *
    477           * @return      none
    478           **************************************************************************************************
    479           */
    480          MAC_INTERNAL_API void macBackoffTimerCompareIsr(void)
    481          {
    482            uint8 oldState;
    483            halIntState_t  s;
    484          
    485            HAL_ENTER_CRITICAL_SECTION(s);
    486            oldState = compareState;
    487          
    488            /* if compare is a rollover, set count to zero */
    489            if (oldState & COMPARE_STATE_ROLLOVER_BV)
    490            {
    491              MAC_RADIO_BACKOFF_SET_COUNT(0);
    492              macBackoffTimerRolloverCallback();
    493            }
    494          
    495            /* if compare is a trigger, reset for rollover and run the trigger callback */
    496            if (oldState & COMPARE_STATE_TRIGGER_BV)
    497            {
    498              compareState = COMPARE_STATE_ROLLOVER;
    499              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerRollover);
    500              HAL_EXIT_CRITICAL_SECTION(s);
    501              macBackoffTimerTriggerCallback();
    502            }
    503            else if (oldState == COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER)
    504            {
    505              compareState = COMPARE_STATE_TRIGGER;
    506              MAC_RADIO_BACKOFF_SET_COMPARE(backoffTimerTrigger);
    507              HAL_EXIT_CRITICAL_SECTION(s);
    508            }
    509            else
    510            {
    511              HAL_EXIT_CRITICAL_SECTION(s);
    512            }
    513          }
    514          
    515          
    516          /**************************************************************************************************
    517          */

Errors: 24
Warnings: 2

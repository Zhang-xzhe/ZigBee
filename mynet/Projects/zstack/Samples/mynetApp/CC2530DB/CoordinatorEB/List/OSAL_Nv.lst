###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2021  11:31:03 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\osal\mcu\cc2530\OSAL_Nv.c                       #
#    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg (-DCPU32MHZ                #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Componen #
#                          ts\osal\mcu\cc2530\OSAL_Nv.c -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\CoordinatorEB\List\ -lA                    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\ --diag_suppress Pe001,Pa010 -o                 #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\ -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Proje #
#                          cts\zstack\Samples\mynetApp\CC2530DB\ -I           #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\SOURCE\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\my #
#                          net\Projects\zstack\Samples\mynetApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MT\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\ -I                         #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\ -I     #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I   #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\ -I C:\Users\25749\OneDrive\×À #
#                          Ãæ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I    #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\ -I C:\Users\25749\OneDrive\×ÀÃ #
#                          æ\Zigbee\mynet\Projects\zstack\Samples\mynetApp\CC #
#                          2530DB\..\..\..\..\..\COMPONENTS\ZMAC\ -I          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\ -I                          #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\ -I                       #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\ -I                  #
#                          C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Li #
#                          st\OSAL_Nv.lst                                     #
#    Object file        =  C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Projects #
#                          \zstack\Samples\mynetApp\CC2530DB\CoordinatorEB\Ob #
#                          j\OSAL_Nv.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"

    for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",228  Error[Pe169]: 
          expected a declaration

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe077]: 
          this declaration has no storage class or type specifier

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr CLKCONCMD" (declared at line 200 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",229  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",230  Error[Pe169]: 
          expected a declaration

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe077]: 
          this declaration has no storage class or type specifier

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe147]: 
          declaration is incompatible with
          "unsigned char volatile __sfr SLEEPCMD" (declared at line 190 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.0
          Evaluation\8051\inc\ioCC2530.h")

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    SLEEPCMD |= OSC_PD;                        /* turn off 16MHz RC */                              \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",231  Error[Pe065]: 
          expected a ";"

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe007]: 
          unrecognized token

    PREFETCH_ENABLE();                                             \//´ò¿ªÁËÒ»¸ö¼Ä´æÆ÷£¬»º´æÊ¹ÄÜ£¬¸úCPUµÄÈ¡Ö¸ÁîÓÐ¹Ø
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",234  Error[Pe169]: 
          expected a declaration

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                       ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Warning[Pe012]: 
          parsing restarts here after previous syntax error

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe007]: 
          unrecognized token

    LED1_DDR |= LED1_BV;                                           \//½«P1_0¡¢P1_1¡¢P1_4Èý¸ö¿ÚÅäÖÃÎªÊä³ö
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",237  Error[Pe169]: 
          expected a declaration

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe077]: 
          this declaration has no storage class or type specifier

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P1DIR"
          (declared at line 268 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    LED3_DDR |= LED3_BV;                                           \
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    LED3_DDR |= LED3_BV;                                           \
             ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",239  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe077]: 
          this declaration has no storage class or type specifier

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe147]: 
          declaration is incompatible with "unsigned char volatile __sfr P0INP"
          (declared at line 131 of "C:\Program Files (x86)\IAR
          Systems\Embedded Workbench 6.0 Evaluation\8051\inc\ioCC2530.h")

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
    ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Be022]: 
          location address not allowed for initialized variables (writable
          variables without the __no_init attribute)

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
          ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe065]: 
          expected a ";"

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe007]: 
          unrecognized token

    P0INP |= PUSH2_BV;                                             \//½«P0_0ÅäÖÃÎªÈýÌ¬
                                                                   ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\TARGET\CC2530EB\hal_board_cfg.h",242  Error[Pe169]: 
          expected a declaration

  extern void HalAdcInit ( void );
                                 ^
"C:\Users\25749\OneDrive\×ÀÃæ\Zigbee\mynet\COMPONENTS\HAL\INCLUDE\hal_adc.h",130  Warning[Pe012]: 
          parsing restarts here after previous syntax error
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
    174          
    175          // Count of the bytes lost for the zeroed-out items.
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
    177          
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.
    181          static uint8 findPg;
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */
    204          static uint8 failF;
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */
    241          static uint8 initNV( void )
    242          {
    243            osalNvPgHdr_t pgHdr;//Ò»¸ö½á¹¹Ìå
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;//ÖÃÁã
    245            uint8 newPg = OSAL_NV_PAGE_NULL;//ÖÃÁã
    246            uint8 findDups = FALSE;//ÖÃÁã
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;//ÖÃÁã
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);//¶Áflash
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
    258                {
    259                  pgRes = pg;
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
    270                {
    271                  newPg = pg;
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
    275                {
    276                  oldPg = pg;
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
    282              {
    283                findDups = TRUE;
    284                pg = OSAL_NV_PAGE_BEG-1;
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
    300              {
    301                setPageUse( newPg, TRUE );
    302              }
    303              else if ( oldPg != OSAL_NV_PAGE_NULL )
    304              {
    305                pgRes = newPg;
    306              }
    307          
    308              /* If a page compaction was interrupted and the page being compacted is not
    309               * yet erased, then there may be items remaining to xfer before erasing.
    310               */
    311              if ( oldPg != OSAL_NV_PAGE_NULL )
    312              {
    313                compactPage( oldPg );
    314              }
    315            }
    316          
    317            /* If no page met the criteria to be the reserve page:
    318             *  - A compactPage() failed or board reset before doing so.
    319             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    320             *    without erasing Flash?
    321             */
    322            if ( pgRes == OSAL_NV_PAGE_NULL )
    323            {
    324              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    325              {
    326                erasePage( pg );
    327              }
    328              initNV();
    329            }
    330          
    331            return TRUE;
    332          }
    333          
    334          /*********************************************************************
    335           * @fn      setPageUse
    336           *
    337           * @brief   Set page header active/inUse state according to 'inUse'.
    338           *
    339           * @param   pg - Valid NV page to verify and init.
    340           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    341           *
    342           * @return  none
    343           */
    344          static void setPageUse( uint8 pg, uint8 inUse )
    345          {
    346            osalNvPgHdr_t pgHdr;
    347          
    348            pgHdr.active = OSAL_NV_ZEROED_ID;
    349          
    350            if ( inUse )
    351            {
    352              pgHdr.inUse = OSAL_NV_ZEROED_ID;
    353            }
    354            else
    355            {
    356              pgHdr.inUse = OSAL_NV_ERASED_ID;
    357            }
    358          
    359            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
    360          }
    361          
    362          /*********************************************************************
    363           * @fn      initPage
    364           *
    365           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    366           *
    367           * @param   pg - Valid NV page to verify and init.
    368           * @param   id - Valid NV item Id to use function as a "findItem".
    369           *               If set to NULL then just perform the page initialization.
    370           *
    371           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    372           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    373           */
    374          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
    375          {
    376            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
    377            uint16 sz, lost = 0;
    378            osalNvHdr_t hdr;
    379          
    380            do
    381            {
    382              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    383          
    384              if ( hdr.id == OSAL_NV_ERASED_ID )
    385              {
    386                break;
    387              }
    388              offset += OSAL_NV_HDR_SIZE;
    389              sz = OSAL_NV_DATA_SIZE( hdr.len );
    390          
    391              // A bad 'len' write has blown away the rest of the page.
    392              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    393              {
    394                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    395                offset = OSAL_NV_PAGE_FREE;
    396                break;
    397              }
    398          
    399              if ( hdr.id != OSAL_NV_ZEROED_ID )
    400              {
    401                /* This trick allows function to do double duty for findItem() without
    402                 * compromising its essential functionality at powerup initialization.
    403                 */
    404                if ( id != OSAL_NV_ITEM_NULL )
    405                {
    406                  /* This trick allows asking to find the old/transferred item in case
    407                   * of a successful new item write that gets interrupted before the
    408                   * old item can be zeroed out.
    409                   */
    410                  if ( (id & 0x7fff) == hdr.id )
    411                  {
    412                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    413                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    414                    {
    415                      return offset;
    416                    }
    417                  }
    418                }
    419                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    420                else
    421                {
    422                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    423                  {
    424                    if ( findDups )
    425                    {
    426                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    427                      {
    428                        /* The trick of setting the MSB of the item Id causes the logic
    429                         * immediately above to return a valid page only if the header 'stat'
    430                         * indicates that it was the older item being transferred.
    431                         */
    432                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    433          
    434                        if ( off != OSAL_NV_ITEM_NULL )
    435                        {
    436                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    437                        }
    438                      }
    439                    }
    440                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    441                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    442                    {
    443                      return OSAL_NV_ERASED_ID;
    444                    }
    445                  }
    446                  else
    447                  {
    448                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    449                    lost += (OSAL_NV_HDR_SIZE + sz);
    450                  }
    451                }
    452              }
    453              else
    454              {
    455                lost += (OSAL_NV_HDR_SIZE + sz);
    456              }
    457              offset += sz;
    458          
    459            } while ( TRUE );
    460          
    461            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
    462            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
    463          
    464            return OSAL_NV_ITEM_NULL;
    465          }
    466          
    467          /*********************************************************************
    468           * @fn      erasePage
    469           *
    470           * @brief   Erases a page in Flash.
    471           *
    472           * @param   pg - Valid NV page to erase.
    473           *
    474           * @return  none
    475           */
    476          static void erasePage( uint8 pg )
    477          {
    478            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
    479            {
    480              failF = TRUE;
    481              return;
    482            }
    483          
    484            HalFlashErase(pg);
    485          
    486            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
    487            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
    488          }
    489          
    490          /*********************************************************************
    491           * @fn      compactPage
    492           *
    493           * @brief   Compacts the page specified.
    494           *
    495           * @param   srcPg - Valid NV page to erase.
    496           *
    497           * @return  none
    498           */
    499          static void compactPage( uint8 srcPg )
    500          {
    501            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
    502            uint16 srcOff = OSAL_NV_ZEROED_ID;
    503            osalNvHdr_t hdr;
    504          
    505            // Mark page as being in process of compaction.
    506            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
    507          
    508            srcOff = OSAL_NV_PAGE_HDR_SIZE;
    509          
    510            do
    511            {
    512              uint16 sz;
    513              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    514          
    515              if ( hdr.id == OSAL_NV_ERASED_ID )
    516              {
    517                break;
    518              }
    519          
    520              srcOff += OSAL_NV_HDR_SIZE;
    521          
    522              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    523              {
    524                break;
    525              }
    526          
    527              sz = OSAL_NV_DATA_SIZE( hdr.len );
    528          
    529              if ( hdr.id != OSAL_NV_ZEROED_ID )
    530              {
    531                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
    532                {
    533                  setItem( srcPg, srcOff, eNvXfer );
    534                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
    535                  dstOff += OSAL_NV_HDR_SIZE;
    536                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
    537                  dstOff += sz;
    538                }
    539          
    540                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
    541              }
    542          
    543              srcOff += sz;
    544          
    545            } while ( TRUE );
    546          
    547            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
    548          
    549            /* In order to recover from a page compaction that is interrupted,
    550             * the logic in osal_nv_init() depends upon the following order:
    551             * 1. Compacted page is erased.
    552             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    553             */
    554            erasePage( srcPg );
    555          
    556            // Mark the reserve page as being in use.
    557            setPageUse( pgRes, TRUE );
    558          
    559            // Set the reserve page to be the newly erased page.
    560            pgRes = srcPg;
    561          }
    562          
    563          /*********************************************************************
    564           * @fn      findItem
    565           *
    566           * @brief   Find an item Id in NV and return the page and offset to its data.
    567           *
    568           * @param   id - Valid NV item Id.
    569           *
    570           * @return  Offset of data corresponding to item Id, if found;
    571           *          otherwise OSAL_NV_ITEM_NULL.
    572           *
    573           *          The page containing the item, if found;
    574           *          otherwise no valid assignment made - left equal to item Id.
    575           *
    576           */
    577          static uint16 findItem( uint16 id )
    578          {
    579            uint16 off;
    580            uint8 pg;
    581          
    582            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    583            {
    584              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    585              {
    586                findPg = pg;
    587                return off;
    588              }
    589            }
    590          
    591            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    592            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    593            {
    594              return findItem( id | OSAL_NV_SOURCE_ID );
    595            }
    596            else
    597            {
    598              findPg = OSAL_NV_PAGE_NULL;
    599              return OSAL_NV_ITEM_NULL;
    600            }
    601          }
    602          
    603          /*********************************************************************
    604           * @fn      initItem
    605           *
    606           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    607           *
    608           * @param   id  - Valid NV item Id.
    609           * @param   len - Item data length.
    610           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    611           *
    612           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    613           */
    614          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
    615          {
    616            uint16 sz = OSAL_NV_ITEM_SIZE( len );
    617            uint8 rtrn = FALSE;
    618            uint8 cnt = OSAL_NV_PAGES_USED;
    619            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
    620            uint8 idx = 0;
    621          
    622            do {
    623              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
    624              {
    625                pg = OSAL_NV_PAGE_BEG;
    626              }
    627              if ( pg != pgRes )
    628              {
    629                idx = pg - OSAL_NV_PAGE_BEG;
    630                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
    631                {
    632                  break;
    633                }
    634              }
    635              pg++;
    636            } while (--cnt);
    637          
    638            if (cnt)
    639            {
    640              // Item fits if an old page is compacted.
    641              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
    642              {
    643                pg = pgRes;
    644              }
    645          
    646              // New item is the first one written to the reserved page, then the old page is compacted.
    647              rtrn = writeItem( pg, id, len, buf, flag );
    648          
    649              if ( pg == pgRes )
    650              {
    651                if ( flag )
    652                {
    653                  compactPage( OSAL_NV_PAGE_BEG+idx );
    654                }
    655                else
    656                {
    657                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
    658                }
    659              }
    660            }
    661          
    662            return rtrn;
    663          }
    664          
    665          /*********************************************************************
    666           * @fn      setItem
    667           *
    668           * @brief   Set an item Id or status to mark its state.
    669           *
    670           * @param   pg - Valid NV page.
    671           * @param   offset - Valid offset into the page of the item data - the header
    672           *                   offset is calculated from this.
    673           * @param   stat - Valid enum value for the item status.
    674           *
    675           * @return  none
    676           */
    677          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
    678          {
    679            osalNvHdr_t hdr;
    680          
    681            offset -= OSAL_NV_HDR_SIZE;
    682            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    683          
    684            if ( stat == eNvXfer )
    685            {
    686              hdr.stat = OSAL_NV_ACTIVE;
    687              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
    688          }
    689            else // if ( stat == eNvZero )
    690            {
    691              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    692                                                                                    OSAL_NV_HDR_SIZE;
    693              hdr.id = 0;
    694              writeWord( pg, offset, (uint8 *)(&hdr) );
    695              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
    696            }
    697          }
    698          
    699          /*********************************************************************
    700           * @fn      calcChkB
    701           *
    702           * @brief   Calculates the data checksum over the 'buf' parameter.
    703           *
    704           * @param   pg - A valid NV Flash page.
    705           * @param   offset - A valid offset into the page.
    706           * @param   len - Byte count of the data to be checksummed.
    707           *
    708           * @return  Calculated checksum of the data bytes.
    709           */
    710          static uint16 calcChkB( uint16 len, uint8 *buf )
    711          {
    712            uint8 fill = len % OSAL_NV_WORD_SIZE;
    713            uint16 chk;
    714          
    715            if ( !buf )
    716            {
    717              chk = len * OSAL_NV_ERASED;
    718            }
    719            else
    720            {
    721              chk = 0;
    722              while ( len-- )
    723              {
    724                chk += *buf++;
    725              }
    726            }
    727          
    728            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    729            if ( fill )
    730            {
    731              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    732            }
    733          
    734            return chk;
    735          }
    736          
    737          /*********************************************************************
    738           * @fn      calcChkF
    739           *
    740           * @brief   Calculates the data checksum by reading the data bytes from NV.
    741           *
    742           * @param   pg - A valid NV Flash page.
    743           * @param   offset - A valid offset into the page.
    744           * @param   len - Byte count of the data to be checksummed.
    745           *
    746           * @return  Calculated checksum of the data bytes.
    747           */
    748          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
    749          {
    750            uint16 chk = 0;
    751          
    752            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
    753          
    754            while ( len-- )
    755            {
    756              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    757          
    758              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
    759              offset += OSAL_NV_WORD_SIZE;
    760          
    761              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
    762              {
    763                chk += tmp[cnt];
    764              }
    765            }
    766          
    767            return chk;
    768          }
    769          
    770          /*********************************************************************
    771           * @fn      writeWord
    772           *
    773           * @brief   Writes a Flash-WORD to NV.
    774           *
    775           * @param   pg - A valid NV Flash page.
    776           * @param   offset - A valid offset into the page.
    777           * @param   buf - Pointer to source buffer.
    778           *
    779           * @return  none
    780           */
    781          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
    782          {
    783            offset = (offset >> 2) + ((uint16)pg << 9);
    784          
    785            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    786            {
    787              HalFlashWrite(offset, buf, 1);
    788            }
    789            else
    790            {
    791              failF = TRUE;
    792            }
    793          }
    794          
    795          /*********************************************************************
    796           * @fn      writeWordM
    797           *
    798           * @brief   Writes multiple Flash-WORDs to NV.
    799           *
    800           * @param   pg - A valid NV Flash page.
    801           * @param   offset - A valid offset into the page.
    802           * @param   buf - Pointer to source buffer.
    803           * @param   cnt - Number of 4-byte blocks to write.
    804           *
    805           * @return  none
    806           */
    807          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    808          {
    809            offset = (offset >> 2) + ((uint16)pg << 9);
    810          
    811            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    812            {
    813              HalFlashWrite(offset, buf, cnt);
    814            }
    815            else
    816            {
    817              failF = TRUE;
    818            }
    819          }
    820          
    821          /*********************************************************************
    822           * @fn      writeWordH
    823           *
    824           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    825           *
    826           * @param   pg - A valid NV Flash page.
    827           * @param   offset - A valid offset into the page.
    828           * @param   buf - Pointer to source buffer.
    829           *
    830           * @return  none
    831           */
    832          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
    833          {
    834            uint8 tmp[4];
    835          
    836            tmp[0] = buf[0];
    837            tmp[1] = buf[1];
    838            tmp[2] = OSAL_NV_ERASED;
    839            tmp[3] = OSAL_NV_ERASED;
    840          
    841            writeWord( pg, offset, tmp );
    842          }
    843          
    844          /*********************************************************************
    845           * @fn      writeBuf
    846           *
    847           * @brief   Writes a data buffer to NV.
    848           *
    849           * @param   dstPg - A valid NV Flash page.
    850           * @param   offset - A valid offset into the page.
    851           * @param   len  - Byte count of the data to write.
    852           * @param   buf  - The data to write.
    853           *
    854           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    855           */
    856          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
    857          {
    858            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
    859            uint8 tmp[OSAL_NV_WORD_SIZE];
    860          
    861            if ( rem )
    862            {
    863              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
    864              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
    865          
    866              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    867              {
    868                tmp[rem++] = *buf++;
    869                len--;
    870              }
    871          
    872              writeWord( dstPg, dstOff, tmp );
    873              dstOff += OSAL_NV_WORD_SIZE;
    874            }
    875          
    876            rem = len % OSAL_NV_WORD_SIZE;
    877            len /= OSAL_NV_WORD_SIZE;
    878          
    879            if ( len )
    880            {
    881              writeWordM( dstPg, dstOff, buf, len );
    882              dstOff += OSAL_NV_WORD_SIZE * len;
    883              buf += OSAL_NV_WORD_SIZE * len;
    884            }
    885          
    886            if ( rem )
    887            {
    888              uint8 idx = 0;
    889              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
    890              while ( rem-- )
    891              {
    892                tmp[idx++] = *buf++;
    893              }
    894              writeWord( dstPg, dstOff, tmp );
    895            }
    896          }
    897          
    898          /*********************************************************************
    899           * @fn      xferBuf
    900           *
    901           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    902           *
    903           * @return  none
    904           */
    905          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
    906          {
    907            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
    908            uint8 tmp[OSAL_NV_WORD_SIZE];
    909          
    910            if ( rem )
    911            {
    912              dstOff -= rem;
    913              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
    914          
    915              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    916              {
    917                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
    918                srcOff++;
    919                rem++;
    920                len--;
    921              }
    922          
    923              writeWord( dstPg, dstOff, tmp );
    924              dstOff += OSAL_NV_WORD_SIZE;
    925            }
    926          
    927            rem = len % OSAL_NV_WORD_SIZE;
    928            len /= OSAL_NV_WORD_SIZE;
    929          
    930            while ( len-- )
    931            {
    932              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
    933              srcOff += OSAL_NV_WORD_SIZE;
    934              writeWord( dstPg, dstOff, tmp );
    935              dstOff += OSAL_NV_WORD_SIZE;
    936            }
    937          
    938            if ( rem )
    939            {
    940              uint8 idx = 0;
    941              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
    942              while ( rem-- )
    943              {
    944                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
    945                srcOff++;
    946                idx++;
    947              }
    948              writeWord( dstPg, dstOff, tmp );
    949            }
    950          }
    951          
    952          /*********************************************************************
    953           * @fn      writeItem
    954           *
    955           * @brief   Writes an item header/data combo to the specified NV page.
    956           *
    957           * @param   pg - Valid NV Flash page.
    958           * @param   id - Valid NV item Id.
    959           * @param   len  - Byte count of the data to write.
    960           * @param   buf  - The data to write. If NULL, no data/checksum write.
    961           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    962           *
    963           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    964           */
    965          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
    966          {
    967            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
    968            uint8 rtrn = FALSE;
    969            osalNvHdr_t hdr;
    970          
    971            if ( pg == pgRes )
    972            {
    973              /* Mark reserve page as being active, in process of receiving items.
    974               * Invoking function must effect a page compaction.
    975               */
    976              setPageUse( pg, FALSE );
    977            }
    978          
    979            hdr.id = id;
    980            hdr.len = len;
    981          
    982            writeWord( pg, offset, (uint8 *)&hdr );
    983            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    984          
    985            if ( (hdr.id == id) && (hdr.len == len) )
    986            {
    987              if ( flag )
    988              {
    989                uint16 chk = calcChkB( len, buf );
    990          
    991                offset += OSAL_NV_HDR_SIZE;
    992                if ( buf != NULL )
    993                {
    994                  writeBuf( pg, offset, len, buf );
    995                }
    996          
    997                if ( chk == calcChkF( pg, offset, len ) )
    998                {
    999                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   1000                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   1001          
   1002                  if ( chk == hdr.chk )
   1003                  {
   1004                    rtrn = pg;
   1005                  }
   1006                }
   1007              }
   1008              else
   1009              {
   1010                rtrn = pg;
   1011              }
   1012            }
   1013          
   1014            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1015            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   1016          
   1017            return rtrn;
   1018          }
   1019          
   1020          /*********************************************************************
   1021           * @fn      osal_nv_init
   1022           *
   1023           * @brief   Initialize NV service.
   1024           *
   1025           * @param   p - Not used.
   1026           *
   1027           * @return  none
   1028           */
   1029          void osal_nv_init( void *p )
   1030          {
   1031            (void)p;  // Suppress Lint warning.
   1032            (void)initNV();  // Always returns TRUE after pages have been erased.
   1033          }
   1034          
   1035          /*********************************************************************
   1036           * @fn      osal_nv_item_init
   1037           *
   1038           * @brief   If the NV item does not already exist, it is created and
   1039           *          initialized with the data passed to the function, if any.
   1040           *          This function must be called before calling osal_nv_read() or
   1041           *          osal_nv_write().
   1042           *
   1043           * @param   id  - Valid NV item Id.
   1044           * @param   len - Item length.
   1045           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1046           *
   1047           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1048           *          ZSUCCESS       - Id already existed, no action taken.
   1049           *          NV_OPER_FAILED - Failure to find or create Id.
   1050           */
   1051          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   1052          {
   1053            /* Global fail flag for fail due to low bus voltage has less impact on code
   1054             * size than passing back a return value all the way from the lowest level.
   1055             */
   1056            failF = FALSE;
   1057          
   1058            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   1059            {
   1060              return ZSUCCESS;
   1061            }
   1062            else if ( initItem( TRUE, id, len, buf ) )
   1063            {
   1064              if ( failF )
   1065              {
   1066                (void)initNV();  // See comment at the declaration of failF.
   1067                return NV_OPER_FAILED;
   1068              }
   1069              else
   1070              {
   1071                return NV_ITEM_UNINIT;
   1072              }
   1073            }
   1074            else
   1075            {
   1076              return NV_OPER_FAILED;
   1077            }
   1078          }
   1079          
   1080          /*********************************************************************
   1081           * @fn      osal_nv_item_len
   1082           *
   1083           * @brief   Get the data length of the item stored in NV memory.
   1084           *
   1085           * @param   id  - Valid NV item Id.
   1086           *
   1087           * @return  Item length, if found; zero otherwise.
   1088           */
   1089          uint16 osal_nv_item_len( uint16 id )
   1090          {
   1091            uint16 offset = findItem( id );
   1092          
   1093            if ( offset == OSAL_NV_ITEM_NULL )
   1094            {
   1095              return 0;
   1096            }
   1097            else
   1098            {
   1099              osalNvHdr_t hdr;
   1100              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   1101              return hdr.len;
   1102            }
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      osal_nv_write
   1107           *
   1108           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1109           *          an element of an item by indexing into the item with an offset.
   1110           *
   1111           * @param   id  - Valid NV item Id.
   1112           * @param   ndx - Index offset into item
   1113           * @param   len - Length of data to write.
   1114           * @param  *buf - Data to write.
   1115           *
   1116           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1117           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1118           */
   1119          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   1120          {
   1121            uint8 rtrn = ZSUCCESS;
   1122          
   1123            /* Global fail flag for fail due to low bus voltage has less impact on code
   1124             * size than passing back a return value all the way from the lowest level.
   1125             */
   1126            failF = FALSE;
   1127          
   1128            if ( len != 0 )
   1129            {
   1130              osalNvHdr_t hdr;
   1131              uint16 origOff, srcOff;
   1132              uint16 cnt;
   1133              uint8 *ptr;
   1134          
   1135              origOff = srcOff = findItem( id );
   1136              if ( srcOff == OSAL_NV_ITEM_NULL )
   1137              {
   1138                return NV_ITEM_UNINIT;
   1139              }
   1140          
   1141              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   1142              if ( hdr.len < (ndx + len) )
   1143              {
   1144                return NV_OPER_FAILED;
   1145              }
   1146          
   1147              srcOff += ndx;
   1148              ptr = buf;
   1149              cnt = len;
   1150              while ( cnt )
   1151              {
   1152                uint8 tmp;
   1153                HalFlashRead(findPg, srcOff++, &tmp, 1);
   1154                if ( tmp != *ptr++ )
   1155                {
   1156                  break;
   1157                }
   1158                cnt--;
   1159              }
   1160          
   1161              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1162              {
   1163                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   1164          
   1165                if ( dstPg != OSAL_NV_PAGE_NULL )
   1166                {
   1167                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   1168                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   1169                  uint8 srcPg = findPg;
   1170                  srcOff = origOff;
   1171          
   1172                  setItem( srcPg, srcOff, eNvXfer );
   1173          
   1174                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   1175                  srcOff += ndx;
   1176                  dstOff += ndx;
   1177          
   1178                  writeBuf( dstPg, dstOff, len, buf );
   1179                  srcOff += len;
   1180                  dstOff += len;
   1181          
   1182                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   1183          
   1184                  // Calculate and write the new checksum.
   1185                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   1186                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   1187                  dstOff -= OSAL_NV_HDR_SIZE;
   1188                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   1189                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   1190          
   1191                  if ( tmp == hdr.chk )
   1192                  {
   1193                    setItem( srcPg, origOff, eNvZero );
   1194                  }
   1195                  else
   1196                  {
   1197                    rtrn = NV_OPER_FAILED;
   1198                  }
   1199          
   1200                  if ( dstPg == pgRes )
   1201                  {
   1202                    compactPage( comPg );
   1203                  }
   1204                }
   1205                else
   1206                {
   1207                  rtrn = NV_OPER_FAILED;
   1208                }
   1209              }
   1210            }
   1211          
   1212            if ( failF )
   1213            {
   1214              (void)initNV();  // See comment at the declaration of failF.
   1215              rtrn = NV_OPER_FAILED;
   1216            }
   1217          
   1218            return rtrn;
   1219          }
   1220          
   1221          /*********************************************************************
   1222           * @fn      osal_nv_read
   1223           *
   1224           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1225           *          an element of an item by indexing into the item with an offset.
   1226           *          Read data is copied into *buf.
   1227           *
   1228           * @param   id  - Valid NV item Id.
   1229           * @param   ndx - Index offset into item
   1230           * @param   len - Length of data to read.
   1231           * @param  *buf - Data is read into this buffer.
   1232           *
   1233           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1234           *          Otherwise, NV_OPER_FAILED for failure.
   1235           */
   1236          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   1237          {
   1238            uint16 offset;
   1239          
   1240            offset = findItem( id );
   1241            if ( offset == OSAL_NV_ITEM_NULL )
   1242            {
   1243              return NV_OPER_FAILED;
   1244            }
   1245          
   1246            HalFlashRead(findPg, offset+ndx, buf, len);
   1247          
   1248            return ZSUCCESS;
   1249          }
   1250          
   1251          /*********************************************************************
   1252          *********************************************************************/

Errors: 24
Warnings: 2

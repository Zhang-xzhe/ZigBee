///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Mar/2021  14:42:03 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\Source\mynetApp.c              /
//    Command line       =  -f C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zs /
//                          tack\Samples\mynetApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wRouter.cfg (-DCPU32MHZ                   /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS) -f                     /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\25749\OneDrive\×À /
//                          Ãæ\mynet\Projects\zstack\Samples\mynetApp\Source\ /
//                          mynetApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK    /
//                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                  /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\RouterEB-Pro\List\    /
//                          -lA C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\z /
//                          stack\Samples\mynetApp\CC2530DB\RouterEB-Pro\List /
//                          \ --diag_suppress Pe001,Pa010 -o                  /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\RouterEB-Pro\Obj\ -e  /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zs /
//                          tack\Samples\mynetApp\CC2530DB\ -I                /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\SOURCE\ -I         /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\ZMAIN\TI2530 /
//                          DB\ -I C:\Users\25749\OneDrive\×ÀÃæ\mynet\Project /
//                          s\zstack\Samples\mynetApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\MT\ -I C:\Users\25749\OneDrive\×ÀÃæ\m /
//                          ynet\Projects\zstack\Samples\mynetApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I           /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\HAL\TARGET\CC2530EB\ -I                      /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\MCU\CCSOC\ -I                           /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\INCLUDE\ -I C:\Users\25749\OneDrive\×ÀÃ /
//                          æ\mynet\Projects\zstack\Samples\mynetApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I           /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\NWK\ -I C:\Users\25749\OneDrive\×ÀÃæ\m /
//                          ynet\Projects\zstack\Samples\mynetApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I             /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\SAPI\ -I C:\Users\25749\OneDrive\×ÀÃæ\ /
//                          mynet\Projects\zstack\Samples\mynetApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SYS\ -I            /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\ZDO\ -I C:\Users\25749\OneDrive\×ÀÃæ\m /
//                          ynet\Projects\zstack\Samples\mynetApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I              /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\ -I C:\Users\25749\OneDrive\×ÀÃæ\mynet\ /
//                          Projects\zstack\Samples\mynetApp\CC2530DB\..\..\. /
//                          .\..\..\COMPONENTS\SERVICES\SADDR\ -I             /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SDATA\ -I                           /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\INCLUDE\ -I C:\Users\25749\OneDrive\×ÀÃæ /
//                          \mynet\Projects\zstack\Samples\mynetApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\ -I                      /
//                          C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz        /
//    List file          =  C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstac /
//                          k\Samples\mynetApp\CC2530DB\RouterEB-Pro\List\myn /
//                          etApp.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mynetApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??mynetApp_HandleKeys?relay
        FUNCTION ??mynetApp_HandleKeys?relay,0203H
        PUBLIC ??mynetApp_Init?relay
        FUNCTION ??mynetApp_Init?relay,0203H
        PUBLIC ??mynetApp_MessageMSGCB?relay
        FUNCTION ??mynetApp_MessageMSGCB?relay,0203H
        PUBLIC ??mynetApp_ProcessEvent?relay
        FUNCTION ??mynetApp_ProcessEvent?relay,0203H
        PUBLIC ??mynetApp_ProcessZDOMsgs?relay
        FUNCTION ??mynetApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??mynetApp_SendTheMessage?relay
        FUNCTION ??mynetApp_SendTheMessage?relay,0203H
        PUBLIC mynetApp_ClusterList
        PUBLIC mynetApp_DstAddr
        PUBLIC mynetApp_HandleKeys
        FUNCTION mynetApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC mynetApp_Init
        FUNCTION mynetApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC mynetApp_MessageMSGCB
        FUNCTION mynetApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC mynetApp_NwkState
        PUBLIC mynetApp_ProcessEvent
        FUNCTION mynetApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC mynetApp_ProcessZDOMsgs
        FUNCTION mynetApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC mynetApp_SendTheMessage
        FUNCTION mynetApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC mynetApp_SimpleDesc
        PUBLIC mynetApp_TaskID
        PUBLIC mynetApp_TransID
        PUBLIC mynetApp_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
lightupD1           SYMBOL "lightupD1"
lightoffD2          SYMBOL "lightoffD2"
lightupD2           SYMBOL "lightupD2"
lightoffD1          SYMBOL "lightoffD1"
lightupD3           SYMBOL "lightupD3"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalLedSet           SYMBOL "HalLedSet"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
osal_strlen         SYMBOL "osal_strlen"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??lightoffD1?relay  SYMBOL "?relay", lightoffD1
??lightoffD2?relay  SYMBOL "?relay", lightoffD2
??lightupD1?relay   SYMBOL "?relay", lightupD1
??lightupD2?relay   SYMBOL "?relay", lightupD2
??lightupD3?relay   SYMBOL "?relay", lightupD3
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
mynetApp_HandleKeys SYMBOL "mynetApp_HandleKeys"
??mynetApp_HandleKeys?relay SYMBOL "?relay", mynetApp_HandleKeys
mynetApp_Init       SYMBOL "mynetApp_Init"
??mynetApp_Init?relay SYMBOL "?relay", mynetApp_Init
mynetApp_MessageMSGCB SYMBOL "mynetApp_MessageMSGCB"
??mynetApp_MessageMSGCB?relay SYMBOL "?relay", mynetApp_MessageMSGCB
mynetApp_ProcessEvent SYMBOL "mynetApp_ProcessEvent"
??mynetApp_ProcessEvent?relay SYMBOL "?relay", mynetApp_ProcessEvent
mynetApp_ProcessZDOMsgs SYMBOL "mynetApp_ProcessZDOMsgs"
??mynetApp_ProcessZDOMsgs?relay SYMBOL "?relay", mynetApp_ProcessZDOMsgs
mynetApp_SendTheMessage SYMBOL "mynetApp_SendTheMessage"
??mynetApp_SendTheMessage?relay SYMBOL "?relay", mynetApp_SendTheMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN lightupD1
        FUNCTION lightupD1,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN lightoffD2
        FUNCTION lightoffD2,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN lightupD2
        FUNCTION lightupD2,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN lightoffD1
        FUNCTION lightoffD1,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN lightupD3
        FUNCTION lightupD3,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??lightoffD1?relay
        FUNCTION ??lightoffD1?relay,00H
        EXTERN ??lightoffD2?relay
        FUNCTION ??lightoffD2?relay,00H
        EXTERN ??lightupD1?relay
        FUNCTION ??lightupD1?relay,00H
        EXTERN ??lightupD2?relay
        FUNCTION ??lightupD2?relay,00H
        EXTERN ??lightupD3?relay
        FUNCTION ??lightupD3?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// C:\Users\25749\OneDrive\×ÀÃæ\mynet\Projects\zstack\Samples\mynetApp\Source\mynetApp.c
//    1 /**************************************************************************************************
//    2   Filename:       mynetApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 15 seconds.  The application will also
//   46   receive "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "mynetApp.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"
//   74 #endif
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 #include"zhanglab.h"
//   82 
//   83 /*********************************************************************
//   84  * MACROS
//   85  */
//   86 
//   87 /*********************************************************************
//   88  * CONSTANTS
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * TYPEDEFS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * GLOBAL VARIABLES
//   97  */
//   98 
//   99 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  100 const cId_t mynetApp_ClusterList[mynetApp_MAX_CLUSTERS] =
mynetApp_ClusterList:
        DW 1
//  101 {
//  102   mynetApp_CLUSTERID
//  103 };
//  104 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  105 const SimpleDescriptionFormat_t mynetApp_SimpleDesc =
mynetApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW mynetApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW mynetApp_ClusterList
//  106 {
//  107   mynetApp_ENDPOINT,              //  int Endpoint;
//  108   mynetApp_PROFID,                //  uint16 AppProfId[2];
//  109   mynetApp_DEVICEID,              //  uint16 AppDeviceId[2];
//  110   mynetApp_DEVICE_VERSION,        //  int   AppDevVer:4;
//  111   mynetApp_FLAGS,                 //  int   AppFlags:4;
//  112   mynetApp_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  113   (cId_t *)mynetApp_ClusterList,  //  byte *pAppInClusterList;
//  114   mynetApp_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  115   (cId_t *)mynetApp_ClusterList   //  byte *pAppInClusterList;
//  116 };
//  117 
//  118 // This is the Endpoint/Interface description.  It is defined here, but
//  119 // filled-in in mynetApp_Init().  Another way to go would be to fill
//  120 // in the structure here and make it a "const" (in code space).  The
//  121 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  122 endPointDesc_t mynetApp_epDesc;
mynetApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 /*********************************************************************
//  125  * EXTERNAL VARIABLES
//  126  */
//  127 
//  128 /*********************************************************************
//  129  * EXTERNAL FUNCTIONS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * LOCAL VARIABLES
//  134  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 byte mynetApp_TaskID;   // Task ID for internal task/event processing
mynetApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  136                           // This variable will be received when
//  137                           // mynetApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 devStates_t mynetApp_NwkState;
mynetApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 
//  140 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 byte mynetApp_TransID;  // This is the unique message ID (counter)
mynetApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t mynetApp_DstAddr;
mynetApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 /*********************************************************************
//  146  * LOCAL FUNCTIONS
//  147  */
//  148 void mynetApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  149 void mynetApp_HandleKeys( byte shift, byte keys );
//  150 void mynetApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  151 void mynetApp_SendTheMessage( void );
//  152 
//  153 /*********************************************************************
//  154  * NETWORK LAYER CALLBACKS
//  155  */
//  156 
//  157 /*********************************************************************
//  158  * PUBLIC FUNCTIONS
//  159  */
//  160 
//  161 /*********************************************************************
//  162  * @fn      mynetApp_Init
//  163  *
//  164  * @brief   Initialization function for the Generic App Task.
//  165  *          This is called during initialization and should contain
//  166  *          any application specific initialization (ie. hardware
//  167  *          initialization/setup, table initialization, power up
//  168  *          notificaiton ... ).
//  169  *
//  170  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  171  *                    used to send messages and set timers.
//  172  *
//  173  * @return  none
//  174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 void mynetApp_Init( byte task_id )
mynetApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function mynetApp_Init
        CODE
//  176 {
        FUNCALL mynetApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  177   mynetApp_TaskID = task_id;
        MOV     DPTR,#mynetApp_TaskID
        MOVX    @DPTR,A
//  178   mynetApp_NwkState = DEV_INIT;
        MOV     DPTR,#mynetApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  179   mynetApp_TransID = 0;
        MOV     DPTR,#mynetApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  180 
//  181   // Device hardware initialization can be added here or in main() (Zmain.c).
//  182   // If the hardware is application specific - add it here.
//  183   // If the hardware is other parts of the device add it in main().
//  184 
//  185   mynetApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#mynetApp_DstAddr + 8
        MOVX    @DPTR,A
//  186   mynetApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  187   mynetApp_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#mynetApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  188 
//  189   // Fill out the endpoint description.
//  190   mynetApp_epDesc.endPoint = mynetApp_ENDPOINT;
        MOV     DPTR,#mynetApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  191   mynetApp_epDesc.task_id = &mynetApp_TaskID;
        INC     DPTR
        MOV     A,#mynetApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(mynetApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  192   mynetApp_epDesc.simpleDesc
//  193             = (SimpleDescriptionFormat_t *)&mynetApp_SimpleDesc;
        INC     DPTR
        MOV     A,#mynetApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(mynetApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  194   mynetApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  195 
//  196   // Register the endpoint description with the AF
//  197   afRegister( &mynetApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#mynetApp_epDesc & 0xff
        MOV     R3,#(mynetApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  198 
//  199   // Register for all key events - This app will handle all key events
//  200   RegisterForKeys( mynetApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#mynetApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  201 
//  202   // Update the display
//  203 #if defined ( LCD_SUPPORTED )
//  204     HalLcdWriteString( "mynetApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "mynetApp">` & 0xff
        MOV     R3,#(`?<Constant "mynetApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  205 #endif
//  206     
//  207   ZDO_RegisterForZDOMsg( mynetApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#mynetApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  208   ZDO_RegisterForZDOMsg( mynetApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#mynetApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  209 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  210 
//  211 /*********************************************************************
//  212  * @fn      mynetApp_ProcessEvent
//  213  *
//  214  * @brief   Generic Application Task event processor.  This function
//  215  *          is called to process all events for the task.  Events
//  216  *          include timers, messages and any other user defined events.
//  217  *
//  218  * @param   task_id  - The OSAL assigned task ID.
//  219  * @param   events - events to process.  This is a bit map and can
//  220  *                   contain more than one event.
//  221  *
//  222  * @return  none
//  223  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 UINT16 mynetApp_ProcessEvent( byte task_id, UINT16 events )
mynetApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function mynetApp_ProcessEvent
        CODE
//  225 {
        FUNCALL mynetApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightupD1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightoffD2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightupD2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightoffD1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightupD3
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightoffD1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, lightoffD2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, mynetApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, mynetApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, mynetApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, mynetApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  226   afIncomingMSGPacket_t *MSGpkt;
//  227   afDataConfirm_t *afDataConfirm;
//  228 
//  229   // Data Confirmation message fields
//  230   byte sentEP;
//  231   ZStatus_t sentStatus;
//  232   byte sentTransID;       // This should match the value sent
//  233   (void)task_id;  // Intentionally unreferenced parameter
//  234 
//  235   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??mynetApp_ProcessEvent_0 & 0xFFFF
//  236   {
//  237     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( mynetApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??mynetApp_ProcessEvent_1
//  238     while ( MSGpkt )
//  239     {
//  240       switch ( MSGpkt->hdr.event )
//  241       {
//  242         case ZDO_CB_MSG:
//  243           mynetApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  244           break;
//  245           
//  246         case KEY_CHANGE:
//  247           mynetApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  248           break;
//  249 
//  250         case AF_DATA_CONFIRM_CMD:
//  251           // This message is received as a confirmation of a data packet sent.
//  252           // The status is of ZStatus_t type [defined in ZComDef.h]
//  253           // The message fields are defined in AF.h
//  254           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  255           sentEP = afDataConfirm->endpoint;
//  256           sentStatus = afDataConfirm->hdr.status;
//  257           sentTransID = afDataConfirm->transID;
//  258           (void)sentEP;
//  259           (void)sentTransID;
//  260 
//  261           // Action taken when confirmation is received.
//  262           if ( sentStatus != ZSuccess )
//  263           {
//  264             // The data wasn't delivered -- Do something
//  265           }
//  266           break;
//  267 
//  268         case AF_INCOMING_MSG_CMD:
//  269           mynetApp_MessageMSGCB( MSGpkt );
//  270           break;
//  271 
//  272         case ZDO_STATE_CHANGE:
//  273           mynetApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??mynetApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#mynetApp_NwkState
        MOVX    @DPTR,A
//  274           if ( (mynetApp_NwkState == DEV_ZB_COORD)
//  275               || (mynetApp_NwkState == DEV_ROUTER)
//  276               || (mynetApp_NwkState == DEV_END_DEVICE) )
//  277           {
//  278             // Start sending "the" message in a regular interval.
//  279 //            osal_start_timerEx( mynetApp_TaskID,
//  280 //                                mynetApp_SEND_MSG_EVT,
//  281 //                              mynetApp_SEND_MSG_TIMEOUT );
//  282           }
//  283           if(mynetApp_NwkState == DEV_ZB_COORD)
        XRL     A,#0x9
        JNZ     ??mynetApp_ProcessEvent_3
//  284           {
//  285             lightupD1();
        ; Setup parameters for call to function lightupD1
        LCALL   ??lightupD1?relay
//  286             lightoffD2();
        ; Setup parameters for call to function lightoffD2
        LCALL   ??lightoffD2?relay
//  287           }
//  288           if(mynetApp_NwkState == DEV_ROUTER)
??mynetApp_ProcessEvent_3:
        MOV     DPTR,#mynetApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??mynetApp_ProcessEvent_4
//  289           {
//  290             lightupD2();
        ; Setup parameters for call to function lightupD2
        LCALL   ??lightupD2?relay
//  291             lightoffD1();
        ; Setup parameters for call to function lightoffD1
        LCALL   ??lightoffD1?relay
//  292           }
//  293           if(mynetApp_NwkState == DEV_END_DEVICE)
??mynetApp_ProcessEvent_4:
        MOV     DPTR,#mynetApp_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??mynetApp_ProcessEvent_5
//  294           {
//  295             lightupD3();
        ; Setup parameters for call to function lightupD3
        LCALL   ??lightupD3?relay
//  296             lightoffD1();
        ; Setup parameters for call to function lightoffD1
        LCALL   ??lightoffD1?relay
//  297             lightoffD2();
        ; Setup parameters for call to function lightoffD2
        LCALL   ??lightoffD2?relay
//  298           }
//  299           break;
//  300 
//  301         default:
//  302           break;
//  303       }
//  304 
//  305       // Release the memory
//  306       osal_msg_deallocate( (uint8 *)MSGpkt );
??mynetApp_ProcessEvent_5:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  307 
//  308       // Next
//  309       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( mynetApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??mynetApp_ProcessEvent_1:
        MOV     DPTR,#mynetApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??mynetApp_ProcessEvent_6
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??mynetApp_ProcessEvent_7
        ADD     A,#0x5a
        JZ      ??mynetApp_ProcessEvent_8
        ADD     A,#-0x11
        JZ      ??mynetApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??mynetApp_ProcessEvent_5
        ; Setup parameters for call to function mynetApp_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??mynetApp_ProcessZDOMsgs?relay
        SJMP    ??mynetApp_ProcessEvent_5
??mynetApp_ProcessEvent_8:
        ; Setup parameters for call to function mynetApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??mynetApp_HandleKeys?relay
        SJMP    ??mynetApp_ProcessEvent_5
??mynetApp_ProcessEvent_7:
        ; Setup parameters for call to function mynetApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??mynetApp_MessageMSGCB?relay
        SJMP    ??mynetApp_ProcessEvent_5
//  310     }
//  311 
//  312     // return unprocessed events
//  313     return (events ^ SYS_EVENT_MSG);
??mynetApp_ProcessEvent_6:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??mynetApp_ProcessEvent_9
//  314   }
//  315 
//  316   // Send a message out - This event is generated by a timer
//  317   //  (setup in mynetApp_Init()).
//  318   if ( events & mynetApp_SEND_MSG_EVT )
??mynetApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??mynetApp_ProcessEvent_10
//  319   {
//  320     // Send "the" message
//  321     mynetApp_SendTheMessage();
        ; Setup parameters for call to function mynetApp_SendTheMessage
        LCALL   ??mynetApp_SendTheMessage?relay
//  322 
//  323     // Setup to send message again
//  324     osal_start_timerEx( mynetApp_TaskID,
//  325                         mynetApp_SEND_MSG_EVT,
//  326                       mynetApp_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#mynetApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  327 
//  328     // return unprocessed events
//  329     return (events ^ mynetApp_SEND_MSG_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??mynetApp_ProcessEvent_9
//  330   }
//  331 
//  332   // Discard unknown events
//  333   return 0;
??mynetApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock1
??mynetApp_ProcessEvent_9:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  334 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  335 
//  336 /*********************************************************************
//  337  * Event Generation Functions
//  338  */
//  339 
//  340 /*********************************************************************
//  341  * @fn      mynetApp_ProcessZDOMsgs()
//  342  *
//  343  * @brief   Process response messages
//  344  *
//  345  * @param   none
//  346  *
//  347  * @return  none
//  348  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 void mynetApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
mynetApp_ProcessZDOMsgs:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function mynetApp_ProcessZDOMsgs
        CODE
//  350 {
        FUNCALL mynetApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  351   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for mynetApp_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??mynetApp_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??mynetApp_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??mynetApp_ProcessZDOMsgs_2
        CODE
//  352   {
//  353     case End_Device_Bind_rsp:
//  354       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??mynetApp_ProcessZDOMsgs_1:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??mynetApp_ProcessZDOMsgs_3
//  355       {
//  356         // Light LED
//  357         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??mynetApp_ProcessZDOMsgs_4:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        SJMP    ??mynetApp_ProcessZDOMsgs_2
//  358       }
//  359 #if defined(BLINK_LEDS)
//  360       else
//  361       {
//  362         // Flash LED to show failure
//  363         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??mynetApp_ProcessZDOMsgs_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??mynetApp_ProcessZDOMsgs_4
//  364       }
//  365 #endif
//  366       break;
//  367 
//  368     case Match_Desc_rsp:
//  369       {
//  370         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??mynetApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  371         if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??mynetApp_ProcessZDOMsgs_2
//  372         {
//  373           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??mynetApp_ProcessZDOMsgs_5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??mynetApp_ProcessZDOMsgs_5
//  374           {
//  375             mynetApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#mynetApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  376             mynetApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#mynetApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  377             // Take the first endpoint, Can be changed to search through endpoints
//  378             mynetApp_DstAddr.endPoint = pRsp->epList[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#mynetApp_DstAddr + 9
        MOVX    @DPTR,A
//  379 
//  380             // Light LED
//  381             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  382           }
//  383           osal_mem_free( pRsp );
??mynetApp_ProcessZDOMsgs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        CFI EndBlock cfiBlock3
//  384         }
//  385       }
//  386       break;
//  387   }
//  388 }
??mynetApp_ProcessZDOMsgs_2:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  389 
//  390 /*********************************************************************
//  391  * @fn      mynetApp_HandleKeys
//  392  *
//  393  * @brief   Handles all key events for this device.
//  394  *
//  395  * @param   shift - true if in shift/alt.
//  396  * @param   keys - bit field for key events. Valid entries:
//  397  *                 HAL_KEY_SW_4
//  398  *                 HAL_KEY_SW_3
//  399  *                 HAL_KEY_SW_2
//  400  *                 HAL_KEY_SW_1
//  401  *
//  402  * @return  none
//  403  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  404 void mynetApp_HandleKeys( byte shift, byte keys )
mynetApp_HandleKeys:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function mynetApp_HandleKeys
        CODE
//  405 {
        FUNCALL mynetApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  406   zAddrType_t dstAddr;
//  407   
//  408   // Shift is used to make each button/switch dual purpose.
//  409   if ( shift )
        MOV     A,R6
        JZ      $+5
        LJMP    ??mynetApp_HandleKeys_0 & 0xFFFF
//  410   {
//  411     if ( keys & HAL_KEY_SW_1 )
//  412     {
//  413     }
//  414     if ( keys & HAL_KEY_SW_2 )
//  415     {
//  416     }
//  417     if ( keys & HAL_KEY_SW_3 )
//  418     {
//  419     }
//  420     if ( keys & HAL_KEY_SW_4 )
//  421     {
//  422     }
//  423   }
//  424   else
//  425   {
//  426     if ( keys & HAL_KEY_SW_1 )
//  427     {
//  428     }
//  429 
//  430     if ( keys & HAL_KEY_SW_2 )
        MOV     ?V0 + 0,#mynetApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(mynetApp_ClusterList >> 8) & 0xff
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??mynetApp_HandleKeys_1
//  431     {
//  432       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  433 
//  434       // Initiate an End Device Bind Request for the mandatory endpoint
//  435       dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  436       dstAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  437       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
//  438                             mynetApp_epDesc.endPoint,
//  439                             mynetApp_PROFID,
//  440                             mynetApp_MAX_CLUSTERS, (cId_t *)mynetApp_ClusterList,
//  441                             mynetApp_MAX_CLUSTERS, (cId_t *)mynetApp_ClusterList,
//  442                             FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPTR,#mynetApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  443     }
//  444 
//  445     if ( keys & HAL_KEY_SW_3 )
//  446     {
//  447     }
//  448 
//  449     if ( keys & HAL_KEY_SW_4 )
??mynetApp_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??mynetApp_HandleKeys_0
//  450     {
//  451       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  452       // Initiate a Match Description Request (Service Discovery)
//  453       dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  454       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  455       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  456                         mynetApp_PROFID,
//  457                         mynetApp_MAX_CLUSTERS, (cId_t *)mynetApp_ClusterList,
//  458                         mynetApp_MAX_CLUSTERS, (cId_t *)mynetApp_ClusterList,
//  459                         FALSE );
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x1
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  460     }
//  461   }
//  462 }
??mynetApp_HandleKeys_0:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock5
//  463 
//  464 /*********************************************************************
//  465  * LOCAL FUNCTIONS
//  466  */
//  467 
//  468 /*********************************************************************
//  469  * @fn      mynetApp_MessageMSGCB
//  470  *
//  471  * @brief   Data message processor callback.  This function processes
//  472  *          any incoming data - probably from other devices.  So, based
//  473  *          on cluster ID, perform the intended action.
//  474  *
//  475  * @param   none
//  476  *
//  477  * @return  none
//  478  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  479 void mynetApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
mynetApp_MessageMSGCB:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function mynetApp_MessageMSGCB
        CODE
//  480 {
        FUNCALL mynetApp_MessageMSGCB, HalLcdWriteScreen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  481   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??mynetApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??mynetApp_MessageMSGCB_0:
        JNZ     ??mynetApp_MessageMSGCB_1
//  482   {
//  483     case mynetApp_CLUSTERID:
//  484       // "the" message
//  485 #if defined( LCD_SUPPORTED )
//  486       HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#`?<Constant "rcvd">` & 0xff
        MOV     R5,#(`?<Constant "rcvd">` >> 8) & 0xff
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??HalLcdWriteScreen?relay
//  487 #elif defined( WIN32 )
//  488       WPRINTSTR( pkt->cmd.Data );
//  489 #endif
//  490       break;
//  491   }
//  492 }
??mynetApp_MessageMSGCB_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  493 
//  494 /*********************************************************************
//  495  * @fn      mynetApp_SendTheMessage
//  496  *
//  497  * @brief   Send "the" message.
//  498  *
//  499  * @param   none
//  500  *
//  501  * @return  none
//  502  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  503 void mynetApp_SendTheMessage( void )
mynetApp_SendTheMessage:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function mynetApp_SendTheMessage
        CODE
//  504 {
        FUNCALL mynetApp_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL mynetApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  505   char theMessageData[] = "Hello World";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "Hello World">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "Hello World">` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  506 
//  507   if ( AF_DataRequest( &mynetApp_DstAddr, &mynetApp_epDesc,
//  508                        mynetApp_CLUSTERID,
//  509                        (byte)osal_strlen( theMessageData ) + 1,
//  510                        (byte *)&theMessageData,
//  511                        &mynetApp_TransID,
//  512                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#mynetApp_TransID & 0xff
        MOV     ?V0 + 1,#(mynetApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        ; Setup parameters for call to function osal_strlen
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#mynetApp_epDesc & 0xff
        MOV     R5,#(mynetApp_epDesc >> 8) & 0xff
        MOV     R2,#mynetApp_DstAddr & 0xff
        MOV     R3,#(mynetApp_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  513   {
//  514     // Successfully requested to be sent.
//  515   }
//  516   else
//  517   {
//  518     // Error occurred in request to send.
//  519   }
//  520 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock7

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mynetApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mynetApp_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "mynetApp">`:
        DB "mynetApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "rcvd">`:
        DB "rcvd"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World">`:
        DB "Hello World"

        END
//  521 
//  522 /*********************************************************************
//  523 *********************************************************************/
// 
// 881 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  40 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 917 bytes of CODE  memory
//  40 bytes of CONST memory
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
